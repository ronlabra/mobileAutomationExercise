{"version":3,"file":"main.js","names":["resolveAppiumHome","env","preflightChecks","args","throwInsteadOfExit","checkNodeOk","checkNpmOk","longStacktrace","require","async_trace_limit","showBuildInfo","process","exit","warnNodeDeprecations","validate","tmpDir","validateTmpDir","err","logger","error","message","red","logNonDefaultArgsWarning","info","inspect","logDefaultCapabilitiesWarning","caps","logStartupInfo","welcome","APPIUM_VER","appiumRev","getGitRev","showArgs","getNonDefaultServerArgs","_","size","isEmpty","defaultCapabilities","logServerPort","address","port","logMessage","getServerUpdaters","driverClasses","pluginClasses","compact","map","keys","getExtraMethodMap","reduce","klass","newMethodMap","areServerCommandArgs","subcommand","SERVER_SUBCOMMAND","init","appiumHome","adjustNodePath","driverConfig","pluginConfig","loadExtensions","parser","getParser","preConfigArgs","parseArgs","configResult","readConfigFile","configFile","errors","Error","filepath","reason","defaults","getDefaultsForSchema","serverArgs","defaultsDeep","config","server","showConfig","logsinkInit","logFilters","issues","rules","logFactory","loadSecureValuesPreprocessingRules","JSON","stringify","warn","util","pluralize","length","appiumDriver","AppiumDriver","parsedArgs","extensionCommandArgs","DRIVER_TYPE","runExtensionCommand","PLUGIN_TYPE","main","getActivePlugins","usePlugins","routeConfiguringFunction","makeRouter","getActiveDrivers","useDrivers","serverUpdaters","extraMethodMap","serverOpts","hostname","allowCors","basePath","cliArgs","keepAliveTimeout","baseServer","debug","stack","nodeconfig","registerNode","close","signal","once","onSignal","deleteAllSessions","force","e","print","values","module","asyncify"],"sources":["../../lib/main.js"],"sourcesContent":["#!/usr/bin/env node\n\nimport {init as logsinkInit} from './logsink'; // this import needs to come first since it sets up global npmlog\nimport logger from './logger'; // logger needs to remain second\n// @ts-ignore\nimport {routeConfiguringFunction as makeRouter, server as baseServer} from '@appium/base-driver';\nimport {logger as logFactory, util, env} from '@appium/support';\nimport {asyncify} from 'asyncbox';\nimport _ from 'lodash';\nimport {AppiumDriver} from './appium';\nimport {runExtensionCommand} from './cli/extension';\nimport {getParser} from './cli/parser';\nimport {\n  APPIUM_VER,\n  checkNodeOk,\n  getGitRev,\n  getNonDefaultServerArgs,\n  showConfig,\n  showBuildInfo,\n  validateTmpDir,\n  warnNodeDeprecations,\n  checkNpmOk,\n} from './config';\nimport {readConfigFile} from './config-file';\nimport {loadExtensions, getActivePlugins, getActiveDrivers} from './extension';\nimport {DRIVER_TYPE, PLUGIN_TYPE, SERVER_SUBCOMMAND} from './constants';\nimport registerNode from './grid-register';\nimport {getDefaultsForSchema, validate} from './schema/schema';\nimport {inspect, adjustNodePath} from './utils';\n\nconst {resolveAppiumHome} = env;\n\n/**\n *\n * @param {ParsedArgs} args\n * @param {boolean} [throwInsteadOfExit]\n */\nasync function preflightChecks(args, throwInsteadOfExit = false) {\n  try {\n    checkNodeOk();\n    await checkNpmOk();\n    if (args.longStacktrace) {\n      require('longjohn').async_trace_limit = -1;\n    }\n    if (args.showBuildInfo) {\n      await showBuildInfo();\n      process.exit(0);\n    }\n    warnNodeDeprecations();\n\n    validate(args);\n\n    if (args.tmpDir) {\n      await validateTmpDir(args.tmpDir);\n    }\n  } catch (err) {\n    logger.error(err.message.red);\n    if (throwInsteadOfExit) {\n      throw err;\n    }\n\n    process.exit(1);\n  }\n}\n\n/**\n * @param {Args} args\n */\nfunction logNonDefaultArgsWarning(args) {\n  logger.info('Non-default server args:');\n  inspect(args);\n}\n\n/**\n * @param {Args['defaultCapabilities']} caps\n */\nfunction logDefaultCapabilitiesWarning(caps) {\n  logger.info(\n    'Default capabilities, which will be added to each request ' +\n      'unless overridden by desired capabilities:'\n  );\n  inspect(caps);\n}\n\n/**\n * @param {ParsedArgs} args\n */\nasync function logStartupInfo(args) {\n  let welcome = `Welcome to Appium v${APPIUM_VER}`;\n  let appiumRev = await getGitRev();\n  if (appiumRev) {\n    welcome += ` (REV ${appiumRev})`;\n  }\n  logger.info(welcome);\n\n  let showArgs = getNonDefaultServerArgs(args);\n  if (_.size(showArgs)) {\n    logNonDefaultArgsWarning(showArgs);\n  }\n  if (!_.isEmpty(args.defaultCapabilities)) {\n    logDefaultCapabilitiesWarning(args.defaultCapabilities);\n  }\n  // TODO: bring back loglevel reporting below once logger is flushed out\n  // logger.info('Console LogLevel: ' + logger.transports.console.level);\n  // if (logger.transports.file) {\n  //   logger.info('File LogLevel: ' + logger.transports.file.level);\n  // }\n}\n\n/**\n * Logs the address and port the server is listening on\n * @param {string} address - Address\n * @param {number} port - Port\n * @returns {void}\n */\nfunction logServerPort(address, port) {\n  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;\n  logger.info(logMessage);\n}\n\n/**\n * Gets a list of `updateServer` functions from all extensions\n * @param {DriverNameMap} driverClasses\n * @param {PluginNameMap} pluginClasses\n * @returns {import('@appium/types').UpdateServerCallback[]}\n */\nfunction getServerUpdaters(driverClasses, pluginClasses) {\n  return _.compact(_.map([...driverClasses.keys(), ...pluginClasses.keys()], 'updateServer'));\n}\n\n/**\n * Makes a big `MethodMap` from all the little `MethodMap`s in the extensions\n * @param {DriverNameMap} driverClasses\n * @param {PluginNameMap} pluginClasses\n * @returns {import('@appium/types').MethodMap}\n */\nfunction getExtraMethodMap(driverClasses, pluginClasses) {\n  return [...driverClasses.keys(), ...pluginClasses.keys()].reduce(\n    (map, klass) => ({\n      ...map,\n      ...(klass.newMethodMap ?? {}),\n    }),\n    {}\n  );\n}\n\n/**\n * @template [T=WithServerSubcommand]\n * @param {Args<T>} args\n * @returns {args is Args<WithServerSubcommand>}\n */\nfunction areServerCommandArgs(args) {\n  return args.subcommand === SERVER_SUBCOMMAND;\n}\n\n/**\n * Initializes Appium, but does not start the server.\n *\n * Use this to get at the configuration schema.\n *\n * If `args` contains a non-empty `subcommand` which is not `server`, this function will return an empty object.\n *\n * @template [T=WithServerSubcommand]\n * @param {Args<T>} [args] - Partial args (progammatic usage only)\n * @returns {Promise<ServerInitResult | ExtCommandInitResult>}\n * @example\n * import {init, getSchema} from 'appium';\n * const options = {}; // config object\n * await init(options);\n * const schema = getSchema(); // entire config schema including plugins and drivers\n */\nasync function init(args) {\n  const appiumHome = args?.appiumHome ?? (await resolveAppiumHome());\n\n  adjustNodePath();\n\n  const {driverConfig, pluginConfig} = await loadExtensions(appiumHome);\n\n  const parser = getParser();\n  let throwInsteadOfExit = false;\n  /** @type {Args<T>} */\n  let preConfigArgs;\n\n  if (args) {\n    // if we have a containing package instead of running as a CLI process,\n    // that package might not appreciate us calling 'process.exit' willy-\n    // nilly, so give it the option to have us throw instead of exit\n    if (args.throwInsteadOfExit) {\n      throwInsteadOfExit = true;\n      // but remove it since it's not a real server arg per se\n      delete args.throwInsteadOfExit;\n    }\n    preConfigArgs = {...args, subcommand: args.subcommand ?? SERVER_SUBCOMMAND};\n  } else {\n    // otherwise parse from CLI\n    preConfigArgs = /** @type {Args<T>} */ (parser.parseArgs());\n  }\n\n  const configResult = await readConfigFile(preConfigArgs.configFile);\n\n  if (!_.isEmpty(configResult.errors)) {\n    throw new Error(\n      `Errors in config file ${configResult.filepath}:\\n ${\n        configResult.reason ?? configResult.errors\n      }`\n    );\n  }\n\n  // merge config and apply defaults.\n  // the order of precendece is:\n  // 1. command line args\n  // 2. config file\n  // 3. defaults from config file.\n  if (areServerCommandArgs(preConfigArgs)) {\n    const defaults = getDefaultsForSchema(false);\n\n    /** @type {ParsedArgs} */\n    const serverArgs = _.defaultsDeep(preConfigArgs, configResult.config?.server, defaults);\n\n    if (preConfigArgs.showConfig) {\n      showConfig(getNonDefaultServerArgs(preConfigArgs), configResult, defaults, serverArgs);\n      return {};\n    }\n\n    await logsinkInit(serverArgs);\n\n    if (serverArgs.logFilters) {\n      const {issues, rules} = await logFactory.loadSecureValuesPreprocessingRules(\n        serverArgs.logFilters\n      );\n      if (!_.isEmpty(issues)) {\n        throw new Error(\n          `The log filtering rules config '${serverArgs.logFilters}' has issues: ` +\n            JSON.stringify(issues, null, 2)\n        );\n      }\n      if (_.isEmpty(rules)) {\n        logger.warn(\n          `Found no log filtering rules in '${serverArgs.logFilters}'. Is that expected?`\n        );\n      } else {\n        logger.info(\n          `Loaded ${util.pluralize('filtering rule', rules.length, true)} from '${\n            serverArgs.logFilters\n          }'`\n        );\n      }\n    }\n\n    const appiumDriver = new AppiumDriver(serverArgs);\n    // set the config on the umbrella driver so it can match drivers to caps\n    appiumDriver.driverConfig = driverConfig;\n    await preflightChecks(serverArgs, throwInsteadOfExit);\n\n    return /** @type {ServerInitResult} */ ({\n      appiumDriver,\n      parsedArgs: serverArgs,\n      driverConfig,\n      pluginConfig,\n    });\n  } else {\n    const extensionCommandArgs = /** @type {Args<import('appium/types').WithExtSubcommand>} */ (\n      preConfigArgs\n    );\n    // if the user has requested the 'driver' CLI, don't run the normal server,\n    // but instead pass control to the driver CLI\n    if (preConfigArgs.subcommand === DRIVER_TYPE) {\n      await runExtensionCommand(extensionCommandArgs, driverConfig);\n      return {};\n    }\n    if (preConfigArgs.subcommand === PLUGIN_TYPE) {\n      await runExtensionCommand(extensionCommandArgs, pluginConfig);\n      return {};\n    }\n    /* istanbul ignore next */\n    return {}; // should never happen\n  }\n}\n\n/**\n * Initializes Appium's config.  Starts server if appropriate and resolves the\n * server instance if so; otherwise resolves w/ `undefined`.\n * @template [T=WithServerSubcommand]\n * @param {Args<T>} [args] - Arguments from CLI or otherwise\n * @returns {Promise<import('@appium/types').AppiumServer|undefined>}\n */\nasync function main(args) {\n  const {appiumDriver, parsedArgs, pluginConfig, driverConfig} = /** @type {ServerInitResult} */ (\n    await init(args)\n  );\n\n  if (!appiumDriver || !parsedArgs || !pluginConfig || !driverConfig) {\n    // if this branch is taken, we've run a different subcommand, so there's nothing\n    // left to do here.\n    return;\n  }\n\n  const pluginClasses = getActivePlugins(pluginConfig, parsedArgs.usePlugins);\n  // set the active plugins on the umbrella driver so it can use them for commands\n  appiumDriver.pluginClasses = pluginClasses;\n\n  await logStartupInfo(parsedArgs);\n  let routeConfiguringFunction = makeRouter(appiumDriver);\n\n  const driverClasses = getActiveDrivers(driverConfig, parsedArgs.useDrivers);\n  const serverUpdaters = getServerUpdaters(driverClasses, pluginClasses);\n  const extraMethodMap = getExtraMethodMap(driverClasses, pluginClasses);\n\n  /** @type {import('@appium/base-driver').ServerOpts} */\n  const serverOpts = {\n    routeConfiguringFunction,\n    port: parsedArgs.port,\n    hostname: parsedArgs.address,\n    allowCors: parsedArgs.allowCors,\n    basePath: parsedArgs.basePath,\n    serverUpdaters,\n    extraMethodMap,\n    cliArgs: parsedArgs,\n  };\n  if (parsedArgs.keepAliveTimeout) {\n    serverOpts.keepAliveTimeout = parsedArgs.keepAliveTimeout * 1000;\n  }\n  let server;\n  try {\n    server = await baseServer(serverOpts);\n  } catch (err) {\n    logger.error(\n      `Could not configure Appium server. It's possible that a driver or plugin tried ` +\n        `to update the server and failed. Original error: ${err.message}`\n    );\n    logger.debug(err.stack);\n    return process.exit(1);\n  }\n\n  if (parsedArgs.allowCors) {\n    logger.warn(\n      'You have enabled CORS requests from any host. Be careful not ' +\n        'to visit sites which could maliciously try to start Appium ' +\n        'sessions on your machine'\n    );\n  }\n  appiumDriver.server = server;\n  try {\n    // configure as node on grid, if necessary\n    // falsy values should not cause this to run\n    if (parsedArgs.nodeconfig) {\n      await registerNode(\n        parsedArgs.nodeconfig,\n        parsedArgs.address,\n        parsedArgs.port,\n        parsedArgs.basePath\n      );\n    }\n  } catch (err) {\n    await server.close();\n    throw err;\n  }\n\n  for (const signal of ['SIGINT', 'SIGTERM']) {\n    process.once(signal, async function onSignal() {\n      logger.info(`Received ${signal} - shutting down`);\n      try {\n        await appiumDriver.deleteAllSessions({\n          force: true,\n          reason: `The process has received ${signal} signal`,\n        });\n        await server.close();\n        process.exit(0);\n      } catch (e) {\n        logger.warn(e);\n        process.exit(1);\n      }\n    });\n  }\n\n  logServerPort(parsedArgs.address, parsedArgs.port);\n  driverConfig.print();\n  pluginConfig.print([...pluginClasses.values()]);\n\n  return server;\n}\n\n// NOTE: this is here for backwards compat for any scripts referencing `main.js` directly\n// (more specifically, `build/lib/main.js`)\n// the executable is now `../index.js`, so that module will typically be `require.main`.\nif (require.main === module) {\n  asyncify(main);\n}\n\n// everything below here is intended to be a public API.\nexport {readConfigFile} from './config-file';\nexport {finalizeSchema, getSchema, validate} from './schema/schema';\nexport {main, init, resolveAppiumHome};\n\n/**\n * @typedef {import('@appium/types').DriverType} DriverType\n * @typedef {import('@appium/types').PluginType} PluginType\n * @typedef {import('@appium/types').DriverClass} DriverClass\n * @typedef {import('@appium/types').PluginClass} PluginClass\n * @typedef {import('appium/types').WithServerSubcommand} WithServerSubcommand\n * @typedef {import('./extension').DriverNameMap} DriverNameMap\n * @typedef {import('./extension').PluginNameMap} PluginNameMap\n */\n\n/**\n * Literally an empty object\n * @typedef { {} } ExtCommandInitResult\n */\n\n/**\n * @typedef ServerInitData\n * @property {import('./appium').AppiumDriver} appiumDriver - The Appium driver\n * @property {import('appium/types').ParsedArgs} parsedArgs - The parsed arguments\n */\n\n/**\n * @typedef {ServerInitData & import('./extension').ExtensionConfigs} ServerInitResult\n */\n\n/**\n * @template [T=WithServerSubcommand]\n * @typedef {import('appium/types').Args<T>} Args\n */\n\n/**\n * @template [T=WithServerSubcommand]\n * @typedef {import('appium/types').ParsedArgs<T>} ParsedArgs\n */\n"],"mappings":"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"}