{"version":3,"file":"config-file.js","names":["yamlLoader","filepath","content","yaml","parse","rawConfig","Map","jsonLoader","set","JSON","loadConfigFile","lc","load","err","code","message","SyntaxError","searchConfigFile","search","formatErrors","errors","config","opts","length","TypeError","betterAjvErrors","getSchema","schemaId","json","format","readConfigFile","lilconfig","loaders","noExt","packageProp","result","isEmpty","pretty","configResult","validate","_","reason","get","normalizeConfig","delete","schema","normalize","section","obj","isUndefined","mappedObj","mapKeys","__","prop","properties","appiumCliDest","camelCase","mapValues","value","property","nextSection","isSchemaTypeObject","Boolean","type"],"sources":["../../lib/config-file.js"],"sourcesContent":["import betterAjvErrors from '@sidvind/better-ajv-errors';\nimport {lilconfig} from 'lilconfig';\nimport _ from 'lodash';\nimport yaml from 'yaml';\nimport {getSchema, validate} from './schema/schema';\n\n/**\n * lilconfig loader to handle `.yaml` files\n * @type {import('lilconfig').LoaderSync}\n */\nfunction yamlLoader(filepath, content) {\n  return yaml.parse(content);\n}\n\n/**\n * A cache of the raw config file (a JSON string) at a filepath.\n * This is used for better error reporting.\n * Note that config files needn't be JSON, but it helps if they are.\n * @type {Map<string,RawJson>}\n */\nconst rawConfig = new Map();\n\n/**\n * Custom JSON loader that caches the raw config file (for use with `better-ajv-errors`).\n * If it weren't for this cache, this would be unnecessary.\n * @type {import('lilconfig').LoaderSync}\n */\nfunction jsonLoader(filepath, content) {\n  rawConfig.set(filepath, content);\n  return JSON.parse(content);\n}\n\n/**\n * Loads a config file from an explicit path\n * @param {LilconfigAsyncSearcher} lc - lilconfig instance\n * @param {string} filepath - Path to config file\n * @returns {Promise<import('lilconfig').LilconfigResult>}\n */\nasync function loadConfigFile(lc, filepath) {\n  try {\n    // removing \"await\" will cause any rejection to _not_ be caught in this block!\n    return await lc.load(filepath);\n  } catch (/** @type {unknown} */ err) {\n    if (/** @type {NodeJS.ErrnoException} */ (err).code === 'ENOENT') {\n      /** @type {NodeJS.ErrnoException} */ (\n        err\n      ).message = `Config file not found at user-provided path: ${filepath}`;\n      throw err;\n    } else if (err instanceof SyntaxError) {\n      // generally invalid JSON\n      err.message = `Config file at user-provided path ${filepath} is invalid:\\n${err.message}`;\n      throw err;\n    }\n    throw err;\n  }\n}\n\n/**\n * Searches for a config file\n * @param {LilconfigAsyncSearcher} lc - lilconfig instance\n * @returns {Promise<import('lilconfig').LilconfigResult>}\n */\nasync function searchConfigFile(lc) {\n  return await lc.search();\n}\n\n/**\n * Given an array of errors and the result of loading a config file, generate a\n * helpful string for the user.\n *\n * - If `opts` contains a `json` property, this should be the original JSON\n *   _string_ of the config file.  This is only applicable if the config file\n *   was in JSON format. If present, it will associate line numbers with errors.\n * - If `errors` happens to be empty, this will throw.\n * @param {import('ajv').ErrorObject[]} errors - Non-empty array of errors. Required.\n * @param {ReadConfigFileResult['config']|any} [config] -\n * Configuration & metadata\n * @param {FormatConfigErrorsOptions} [opts]\n * @throws {TypeError} If `errors` is empty\n * @returns {string}\n */\nexport function formatErrors(errors = [], config = {}, opts = {}) {\n  if (errors && !errors.length) {\n    throw new TypeError('Array of errors must be non-empty');\n  }\n  return betterAjvErrors(getSchema(opts.schemaId), config, errors, {\n    json: opts.json,\n    format: 'cli',\n  });\n}\n\n/**\n * Given an optional path, read a config file. Validates the config file.\n *\n * Call {@link validate} if you already have a config object.\n * @param {string} [filepath] - Path to config file, if we have one\n * @param {ReadConfigFileOptions} [opts] - Options\n * @public\n * @returns {Promise<ReadConfigFileResult>} Contains config and filepath, if found, and any errors\n */\nexport async function readConfigFile(filepath, opts = {}) {\n  const lc = lilconfig('appium', {\n    loaders: {\n      '.yaml': yamlLoader,\n      '.yml': yamlLoader,\n      '.json': jsonLoader,\n      noExt: jsonLoader,\n    },\n    packageProp: 'appiumConfig',\n  });\n\n  const result = filepath ? await loadConfigFile(lc, filepath) : await searchConfigFile(lc);\n\n  if (result?.filepath && !result?.isEmpty) {\n    const {pretty = true} = opts;\n    try {\n      let configResult;\n      const errors = validate(result.config);\n      if (_.isEmpty(errors)) {\n        configResult = {...result, errors};\n      } else {\n        const reason = formatErrors(errors, result.config, {\n          json: rawConfig.get(result.filepath),\n          pretty,\n        });\n        configResult = reason ? {...result, errors, reason} : {...result, errors};\n      }\n\n      // normalize (to camel case) all top-level property names of the config file\n      configResult.config = normalizeConfig(/** @type {AppiumConfig} */ (configResult.config));\n\n      return configResult;\n    } finally {\n      // clean up the raw config file cache, which is only kept to better report errors.\n      rawConfig.delete(result.filepath);\n    }\n  }\n  return result ?? {};\n}\n\n/**\n * Convert schema property names to either a) the value of the `appiumCliDest` property, if any; or b) camel-case\n * @param {AppiumConfig} config - Configuration object\n * @returns {NormalizedAppiumConfig} New object with camel-cased keys (or `dest` keys).\n */\nexport function normalizeConfig(config) {\n  const schema = getSchema();\n  /**\n   * @param {AppiumConfig} config\n   * @param {string} [section] - Keypath (lodash `_.get()` style) to section of config. If omitted, assume root Appium config schema\n   * @todo Rewrite as a loop\n   * @returns Normalized section of config\n   */\n  const normalize = (config, section) => {\n    const obj = _.isUndefined(section) ? config : _.get(config, section, config);\n\n    const mappedObj = _.mapKeys(\n      obj,\n      (__, prop) => schema.properties[prop]?.appiumCliDest ?? _.camelCase(prop)\n    );\n\n    return _.mapValues(mappedObj, (value, property) => {\n      const nextSection = section ? `${section}.${property}` : property;\n      return isSchemaTypeObject(schema.properties?.[property])\n        ? normalize(config, nextSection)\n        : value;\n    });\n  };\n\n  /**\n   * Returns `true` if the schema prop references an object, or if it's an object itself\n   * @param {import('ajv').SchemaObject|object} schema - Referencing schema object\n   */\n  const isSchemaTypeObject = (schema) => Boolean(schema?.properties || schema?.type === 'object');\n\n  return normalize(config);\n}\n\n/**\n * Result of calling {@link readConfigFile}.\n * @typedef ReadConfigFileResult\n * @property {import('ajv').ErrorObject[]} [errors] - Validation errors\n * @property {string} [filepath] - The path to the config file, if found\n * @property {boolean} [isEmpty] - If `true`, the config file exists but is empty\n * @property {NormalizedAppiumConfig} [config] - The parsed configuration\n * @property {string|import('@sidvind/better-ajv-errors').IOutputError[]} [reason] - Human-readable error messages and suggestions. If the `pretty` option is `true`, this will be a nice string to print.\n */\n\n/**\n * Options for {@link readConfigFile}.\n * @typedef ReadConfigFileOptions\n * @property {boolean} [pretty=true] If `false`, do not use color and fancy formatting in the `reason` property of the {@link ReadConfigFileResult}. The value of `reason` is then suitable for machine-reading.\n */\n\n/**\n * This is an `AsyncSearcher` which is inexplicably _not_ exported by the `lilconfig` type definition.\n * @typedef {ReturnType<import('lilconfig')[\"lilconfig\"]>} LilconfigAsyncSearcher\n */\n\n/**\n * The contents of an Appium config file. Generated from schema\n * @typedef {import('@appium/types').AppiumConfig} AppiumConfig\n */\n\n/**\n * The contents of an Appium config file with camelcased property names (and using `appiumCliDest` value if present). Generated from {@link AppiumConfig}\n * @typedef {import('@appium/types').NormalizedAppiumConfig} NormalizedAppiumConfig\n */\n\n/**\n * The string should be a raw JSON string.\n * @typedef {string} RawJson\n */\n\n/**\n * Options for {@link formatErrors}.\n * @typedef FormatConfigErrorsOptions\n * @property {import('./config-file').RawJson} [json] - Raw JSON config (as string)\n * @property {boolean} [pretty=true] - Whether to format errors as a CLI-friendly string\n * @property {string}  [schemaId] - Specific ID of a prop; otherwise entire schema\n */\n"],"mappings":"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"}