"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adjustNodePath = adjustNodePath;
exports.getPackageVersion = getPackageVersion;
exports.insertAppiumPrefixes = insertAppiumPrefixes;
exports.inspect = void 0;
exports.parseCapsForInnerDriver = parseCapsForInnerDriver;
exports.pullSettings = pullSettings;
exports.removeAppiumPrefixes = removeAppiumPrefixes;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _baseDriver = require("@appium/base-driver");

var _util = require("util");

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const W3C_APPIUM_PREFIX = 'appium';
const STANDARD_CAPS_LOWERCASE = new Set([..._baseDriver.STANDARD_CAPS].map(cap => cap.toLowerCase()));
const isStdoutTTY = process.stdout.isTTY;

const inspect = _lodash.default.flow(_lodash.default.partialRight(_util.inspect, {
  colors: true,
  depth: null,
  compact: !isStdoutTTY
}), (...args) => {
  _logger.default.info(...args);
});

exports.inspect = inspect;

function parseCapsForInnerDriver(jsonwpCapabilities, w3cCapabilities, constraints = {}, defaultCapabilities = {}) {
  const hasW3CCaps = _lodash.default.isPlainObject(w3cCapabilities) && (_lodash.default.has(w3cCapabilities, 'alwaysMatch') || _lodash.default.has(w3cCapabilities, 'firstMatch'));

  const hasJSONWPCaps = _lodash.default.isPlainObject(jsonwpCapabilities);

  let desiredCaps = {};
  let processedW3CCapabilities;
  let processedJsonwpCapabilities;

  if (!hasW3CCaps) {
    return {
      protocol: _baseDriver.PROTOCOLS.W3C,
      error: new Error('W3C capabilities should be provided')
    };
  }

  const {
    W3C
  } = _baseDriver.PROTOCOLS;
  const protocol = W3C;
  jsonwpCapabilities = _lodash.default.cloneDeep(jsonwpCapabilities);
  w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
  defaultCapabilities = _lodash.default.cloneDeep(defaultCapabilities);

  if (!_lodash.default.isEmpty(defaultCapabilities)) {
    if (hasW3CCaps) {
      for (const [defaultCapKey, defaultCapValue] of _lodash.default.toPairs(defaultCapabilities)) {
        let isCapAlreadySet = false;

        for (const firstMatchEntry of w3cCapabilities.firstMatch ?? []) {
          if (_lodash.default.isPlainObject(firstMatchEntry) && _lodash.default.has(removeAppiumPrefixes(firstMatchEntry), removeAppiumPrefix(defaultCapKey))) {
            isCapAlreadySet = true;
            break;
          }
        }

        isCapAlreadySet = isCapAlreadySet || _lodash.default.isPlainObject(w3cCapabilities.alwaysMatch) && _lodash.default.has(removeAppiumPrefixes(w3cCapabilities.alwaysMatch), removeAppiumPrefix(defaultCapKey));

        if (isCapAlreadySet) {
          continue;
        }

        if (_lodash.default.isEmpty(w3cCapabilities.firstMatch)) {
          w3cCapabilities.firstMatch = [{
            [defaultCapKey]: defaultCapValue
          }];
        } else {
          w3cCapabilities.firstMatch[0][defaultCapKey] = defaultCapValue;
        }
      }
    }

    if (hasJSONWPCaps) {
      jsonwpCapabilities = { ...removeAppiumPrefixes(defaultCapabilities),
        ...jsonwpCapabilities
      };
    }
  }

  if (hasJSONWPCaps) {
    processedJsonwpCapabilities = { ...jsonwpCapabilities
    };
  }

  if (hasW3CCaps) {
    try {
      desiredCaps = (0, _baseDriver.processCapabilities)(w3cCapabilities, constraints, true);
    } catch (error) {
      _logger.default.info(`Could not parse W3C capabilities: ${error.message}`);

      return {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        protocol,
        error
      };
    }

    processedW3CCapabilities = {
      alwaysMatch: { ...insertAppiumPrefixes(desiredCaps)
      },
      firstMatch: [{}]
    };
  }

  return {
    desiredCaps,
    processedJsonwpCapabilities,
    processedW3CCapabilities,
    protocol
  };
}

function insertAppiumPrefixes(caps) {
  return _lodash.default.mapKeys(caps, (_, key) => STANDARD_CAPS_LOWERCASE.has(key.toLowerCase()) || key.includes(':') ? key : `${W3C_APPIUM_PREFIX}:${key}`);
}

function removeAppiumPrefixes(caps) {
  return _lodash.default.mapKeys(caps, (_, key) => removeAppiumPrefix(key));
}

function removeAppiumPrefix(key) {
  const prefix = `${W3C_APPIUM_PREFIX}:`;
  return _lodash.default.startsWith(key, prefix) ? key.substring(prefix.length) : key;
}

function getPackageVersion(pkgName) {
  const pkgInfo = require(`${pkgName}/package.json`) || {};
  return pkgInfo.version;
}

function adjustNodePath() {
  const selfRoot = _support.node.getModuleRootSync('appium', __filename);

  if (!selfRoot || _path.default.dirname(selfRoot).length >= selfRoot.length) {
    return;
  }

  const nodeModulesRoot = _path.default.dirname(selfRoot);

  const refreshRequirePaths = () => {
    try {
      require('module').Module._initPaths();

      return true;
    } catch (e) {
      return false;
    }
  };

  if (!process.env.NODE_PATH) {
    process.env.NODE_PATH = nodeModulesRoot;

    if (refreshRequirePaths()) {
      process.env.APPIUM_OMIT_PEER_DEPS = '1';
    } else {
      delete process.env.NODE_PATH;
    }

    return;
  }

  const nodePathParts = process.env.NODE_PATH.split(_path.default.delimiter);

  if (nodePathParts.includes(nodeModulesRoot)) {
    process.env.APPIUM_OMIT_PEER_DEPS = '1';
    return;
  }

  nodePathParts.push(nodeModulesRoot);
  process.env.NODE_PATH = nodePathParts.join(_path.default.delimiter);

  if (refreshRequirePaths()) {
    process.env.APPIUM_OMIT_PEER_DEPS = '1';
  } else {
    process.env.NODE_PATH = _lodash.default.without(nodePathParts, nodeModulesRoot).join(_path.default.delimiter);
  }
}

function pullSettings(caps) {
  if (!_lodash.default.isPlainObject(caps) || _lodash.default.isEmpty(caps)) {
    return {};
  }

  const result = {};

  for (const [key, value] of _lodash.default.toPairs(caps)) {
    const match = /\bsettings\[(\S+)\]$/.exec(key);

    if (!match) {
      continue;
    }

    result[match[1]] = value;
    delete caps[key];
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,