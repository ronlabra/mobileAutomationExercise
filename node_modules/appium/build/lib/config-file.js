"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatErrors = formatErrors;
exports.normalizeConfig = normalizeConfig;
exports.readConfigFile = readConfigFile;

require("source-map-support/register");

var _betterAjvErrors = _interopRequireDefault(require("@sidvind/better-ajv-errors"));

var _lilconfig = require("lilconfig");

var _lodash = _interopRequireDefault(require("lodash"));

var _yaml = _interopRequireDefault(require("yaml"));

var _schema = require("./schema/schema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function yamlLoader(filepath, content) {
  return _yaml.default.parse(content);
}

const rawConfig = new Map();

function jsonLoader(filepath, content) {
  rawConfig.set(filepath, content);
  return JSON.parse(content);
}

async function loadConfigFile(lc, filepath) {
  try {
    return await lc.load(filepath);
  } catch (err) {
    if (err.code === 'ENOENT') {
      err.message = `Config file not found at user-provided path: ${filepath}`;
      throw err;
    } else if (err instanceof SyntaxError) {
      err.message = `Config file at user-provided path ${filepath} is invalid:\n${err.message}`;
      throw err;
    }

    throw err;
  }
}

async function searchConfigFile(lc) {
  return await lc.search();
}

function formatErrors(errors = [], config = {}, opts = {}) {
  if (errors && !errors.length) {
    throw new TypeError('Array of errors must be non-empty');
  }

  return (0, _betterAjvErrors.default)((0, _schema.getSchema)(opts.schemaId), config, errors, {
    json: opts.json,
    format: 'cli'
  });
}

async function readConfigFile(filepath, opts = {}) {
  const lc = (0, _lilconfig.lilconfig)('appium', {
    loaders: {
      '.yaml': yamlLoader,
      '.yml': yamlLoader,
      '.json': jsonLoader,
      noExt: jsonLoader
    },
    packageProp: 'appiumConfig'
  });
  const result = filepath ? await loadConfigFile(lc, filepath) : await searchConfigFile(lc);

  if (result !== null && result !== void 0 && result.filepath && !(result !== null && result !== void 0 && result.isEmpty)) {
    const {
      pretty = true
    } = opts;

    try {
      let configResult;
      const errors = (0, _schema.validate)(result.config);

      if (_lodash.default.isEmpty(errors)) {
        configResult = { ...result,
          errors
        };
      } else {
        const reason = formatErrors(errors, result.config, {
          json: rawConfig.get(result.filepath),
          pretty
        });
        configResult = reason ? { ...result,
          errors,
          reason
        } : { ...result,
          errors
        };
      }

      configResult.config = normalizeConfig(configResult.config);
      return configResult;
    } finally {
      rawConfig.delete(result.filepath);
    }
  }

  return result ?? {};
}

function normalizeConfig(config) {
  const schema = (0, _schema.getSchema)();

  const normalize = (config, section) => {
    const obj = _lodash.default.isUndefined(section) ? config : _lodash.default.get(config, section, config);

    const mappedObj = _lodash.default.mapKeys(obj, (__, prop) => {
      var _schema$properties$pr;

      return ((_schema$properties$pr = schema.properties[prop]) === null || _schema$properties$pr === void 0 ? void 0 : _schema$properties$pr.appiumCliDest) ?? _lodash.default.camelCase(prop);
    });

    return _lodash.default.mapValues(mappedObj, (value, property) => {
      var _schema$properties;

      const nextSection = section ? `${section}.${property}` : property;
      return isSchemaTypeObject((_schema$properties = schema.properties) === null || _schema$properties === void 0 ? void 0 : _schema$properties[property]) ? normalize(config, nextSection) : value;
    });
  };

  const isSchemaTypeObject = schema => Boolean((schema === null || schema === void 0 ? void 0 : schema.properties) || (schema === null || schema === void 0 ? void 0 : schema.type) === 'object');

  return normalize(config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,