"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformers = void 0;

require("source-map-support/register");

var _argparse = require("argparse");

var _fs = require("fs");

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseCsvLine(value) {
  return value.split(',').map(v => v.trim()).filter(Boolean);
}

function parseCsvFile(value) {
  return value.split(/\r?\n/).map(v => v.trim()).filter(Boolean).flatMap(parseCsvLine);
}

const transformers = {
  csv: csvOrPath => {
    let csv = csvOrPath;
    let loadedFromFile = false;

    if ((0, _fs.existsSync)(csvOrPath)) {
      try {
        csv = (0, _fs.readFileSync)(csvOrPath, 'utf8');
      } catch (err) {
        throw new _argparse.ArgumentTypeError(`Could not read file '${csvOrPath}': ${err.message}`);
      }

      loadedFromFile = true;
    }

    try {
      return loadedFromFile ? parseCsvFile(csv) : parseCsvLine(csv);
    } catch (err) {
      const msg = loadedFromFile ? `The provided value of '${csvOrPath}' must be a valid CSV` : `Must be a comma-delimited string, e.g., "foo,bar,baz"`;
      throw new TypeError(`${msg}. Original error: ${err.message}`);
    }
  },
  json: jsonOrPath => {
    let json = jsonOrPath;
    let loadedFromFile = false;

    if ((0, _fs.existsSync)(jsonOrPath)) {
      try {
        json = (0, _fs.readFileSync)(jsonOrPath, 'utf8');
      } catch (err) {
        throw new _argparse.ArgumentTypeError(`Could not read file '${jsonOrPath}': ${err.message}`);
      }

      loadedFromFile = true;
    }

    try {
      const result = JSON.parse(json);

      if (!_lodash.default.isPlainObject(result)) {
        throw new Error(`'${_lodash.default.truncate(result, {
          length: 100
        })}' is not an object`);
      }

      return result;
    } catch (e) {
      const msg = loadedFromFile ? `The provided value of '${jsonOrPath}' must be a valid JSON` : `The provided value must be a valid JSON`;
      throw new TypeError(`${msg}. Original error: ${e.message}`);
    }
  }
};
exports.transformers = transformers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,