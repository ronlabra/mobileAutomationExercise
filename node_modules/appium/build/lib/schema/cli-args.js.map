{"version":3,"file":"cli-args.js","names":["TYPENAMES","Object","freeze","ARRAY","OBJECT","BOOLEAN","INTEGER","NUMBER","NULL","STRING","SHORT_ARG_CUTOFF","aliasToFlag","argSpec","alias","extType","extName","name","arg","isShort","length","_","kebabCase","screamingSnakeCase","flow","snakeCase","toUpper","getSchemaValidator","ref","schemaId","coerce","identity","value","coerced","errors","validate","isEmpty","ArgumentTypeError","formatErrors","makeDescription","schema","appiumCliDescription","description","appiumDeprecated","desc","subSchemaToArgDef","subSchema","type","appiumCliAliases","appiumCliTransformer","enum","enumValues","aliases","map","argOpts","required","help","argTypeFunction","action","const","transformers","json","csv","parseFloat","parseInt","TypeError","metavar","choices","String","toParserArgs","flattened","flattenSchema","filter","appiumCliIgnored","Map"],"sources":["../../../lib/schema/cli-args.js"],"sourcesContent":["import {ArgumentTypeError} from 'argparse';\nimport _ from 'lodash';\nimport {formatErrors as formatErrors} from '../config-file';\nimport {flattenSchema, validate} from './schema';\nimport {transformers} from './cli-transformers';\n\n/**\n * This module concerns functions which convert schema definitions to\n * `argparse`-compatible data structures, for deriving CLI arguments from a\n * schema.\n */\n\n/**\n * Lookup of possible values for the `type` field in a JSON schema.\n * @type {Readonly<Record<string, import('json-schema').JSONSchema7TypeName>>}\n */\nconst TYPENAMES = Object.freeze({\n  ARRAY: 'array',\n  OBJECT: 'object',\n  BOOLEAN: 'boolean',\n  INTEGER: 'integer',\n  NUMBER: 'number',\n  NULL: 'null',\n  STRING: 'string',\n});\n\n/**\n * Options with alias lengths less than this will be considered \"short\" flags.\n */\nconst SHORT_ARG_CUTOFF = 3;\n\n/**\n * Convert an alias (`foo`) to a flag (`--foo`) or a short flag (`-f`).\n * @param {ArgSpec} argSpec - the argument specification\n * @param {string} [alias] - the alias to convert to a flag\n * @returns {string} the flag\n */\nfunction aliasToFlag(argSpec, alias) {\n  const {extType, extName, name} = argSpec;\n  const arg = alias ?? name;\n  const isShort = arg.length < SHORT_ARG_CUTOFF;\n  if (extType && extName) {\n    return isShort\n      ? `--${extType}-${_.kebabCase(extName)}-${arg}`\n      : `--${extType}-${_.kebabCase(extName)}-${_.kebabCase(arg)}`;\n  }\n  return isShort ? `-${arg}` : `--${_.kebabCase(arg)}`;\n}\n\n/**\n * Converts a string to SCREAMING_SNAKE_CASE\n */\nconst screamingSnakeCase = _.flow(_.snakeCase, _.toUpper);\n\n/**\n * Given unique property name `name`, return a function which validates a value\n * against a property within the schema.\n * @template Coerced\n * @param {ArgSpec} argSpec - Argument name\n * @param {(value: string) => Coerced} [coerce] - Function to coerce to a different\n * primitive\n * @todo See if we can remove `coerce` by allowing Ajv to coerce in its\n * constructor options\n * @returns\n */\nfunction getSchemaValidator({ref: schemaId}, coerce = _.identity) {\n  /** @param {string} value */\n  return (value) => {\n    const coerced = coerce(value);\n    const errors = validate(coerced, schemaId);\n    if (_.isEmpty(errors)) {\n      return coerced;\n    }\n    throw new ArgumentTypeError('\\n\\n' + formatErrors(errors, value, {schemaId}));\n  };\n}\n\n/**\n * Determine the description for display on the CLI, given the schema.\n * @param {AppiumJSONSchema} schema\n * @returns {string}\n */\nfunction makeDescription(schema) {\n  const {appiumCliDescription, description = '', appiumDeprecated} = schema;\n  let desc = appiumCliDescription ?? description;\n  if (appiumDeprecated) {\n    desc = `[DEPRECATED] ${desc}`;\n  }\n  return desc;\n}\n\n/**\n * Given arg `name`, a JSON schema `subSchema`, and options, return an argument definition\n * as understood by `argparse`.\n * @param {AppiumJSONSchema} subSchema - JSON schema for the option\n * @param {ArgSpec} argSpec - Argument spec tuple\n * @returns {[string[], import('argparse').ArgumentOptions]} Tuple of flag and options\n */\nfunction subSchemaToArgDef(subSchema, argSpec) {\n  let {type, appiumCliAliases, appiumCliTransformer, enum: enumValues} = subSchema;\n\n  const {name, arg} = argSpec;\n\n  const aliases = [\n    aliasToFlag(argSpec),\n    .../** @type {string[]} */ (appiumCliAliases ?? []).map((alias) => aliasToFlag(argSpec, alias)),\n  ];\n\n  /** @type {import('argparse').ArgumentOptions} */\n  let argOpts = {\n    required: false,\n    help: makeDescription(subSchema),\n  };\n\n  /**\n   * Generally we will provide a `type` to `argparse` as a function which\n   * validates using ajv (which is much more full-featured than what `argparse`\n   * can offer). The exception is `boolean`-type options, which have no\n   * `argType`.\n   *\n   * Not sure if this type is correct, but it's not doing what I want.  I want\n   * to say \"this is a function which returns something of type `T` where `T` is\n   * never a `Promise`\".  This function must be sync.\n   * @type {((value: string) => unknown)|undefined}\n   */\n  let argTypeFunction;\n\n  // handle special cases for various types\n  switch (type) {\n    // booleans do not have a type per `ArgumentOptions`, just an \"action\"\n    // NOTE: due to limitations of `argparse`, we cannot provide fancy help text, and must rely on its internal error messaging.\n    case TYPENAMES.BOOLEAN: {\n      argOpts.action = 'store_const';\n      argOpts.const = true;\n      break;\n    }\n\n    case TYPENAMES.OBJECT: {\n      argTypeFunction = transformers.json;\n      break;\n    }\n\n    // arrays are treated as CSVs, because `argparse` doesn't handle array data.\n    case TYPENAMES.ARRAY: {\n      argTypeFunction = transformers.csv;\n      break;\n    }\n\n    // \"number\" type is coerced to float. `argparse` does this for us if we use `float` type, but\n    // we don't.\n    case TYPENAMES.NUMBER: {\n      argTypeFunction = getSchemaValidator(argSpec, parseFloat);\n      break;\n    }\n\n    // \"integer\" is coerced to an .. integer.  again, `argparse` would do this for us if we used `int`.\n    case TYPENAMES.INTEGER: {\n      argTypeFunction = getSchemaValidator(argSpec, _.parseInt);\n      break;\n    }\n\n    // strings (like number and integer) are subject to further validation\n    // (e.g., must satisfy a mask or regex or even some custom validation\n    // function)\n    case TYPENAMES.STRING: {\n      argTypeFunction = getSchemaValidator(argSpec);\n      break;\n    }\n\n    // TODO: there may be some way to restrict this at the Ajv level --\n    // that may involve patching the metaschema.\n    case TYPENAMES.NULL:\n    // falls through\n    default: {\n      throw new TypeError(`Schema property \"${arg}\": \\`${type}\\` type unknown or disallowed`);\n    }\n  }\n\n  // metavar is used in help text. `boolean` cannot have a metavar--it is not\n  // displayed--and `argparse` throws if you give it one.\n  if (type !== TYPENAMES.BOOLEAN) {\n    argOpts.metavar = screamingSnakeCase(name);\n  }\n\n  // the validity of \"appiumCliTransformer\" should already have been determined\n  // by ajv during schema validation in `finalizeSchema()`. the `array` &\n  // `object` types have already added a formatter (see above, so we don't do it\n  // twice).\n  if (type !== TYPENAMES.ARRAY && type !== TYPENAMES.OBJECT && appiumCliTransformer) {\n    argTypeFunction = _.flow(argTypeFunction ?? _.identity, transformers[appiumCliTransformer]);\n  }\n\n  if (argTypeFunction) {\n    argOpts.type = argTypeFunction;\n  }\n\n  // convert JSON schema `enum` to `choices`. `enum` can contain any JSON type, but `argparse`\n  // is limited to a single type per arg (I think).  so let's make everything a string.\n  // and might as well _require_ the `type: string` while we're at it.\n  if (enumValues && !_.isEmpty(enumValues)) {\n    if (type === TYPENAMES.STRING) {\n      argOpts.choices = enumValues.map(String);\n    } else {\n      throw new TypeError(\n        `Problem with schema for ${arg}; \\`enum\\` is only supported for \\`type: 'string'\\``\n      );\n    }\n  }\n\n  return [aliases, argOpts];\n}\n\n/**\n * Converts the finalized, flattened schema representation into\n * ArgumentDefinitions for handoff to `argparse`.\n *\n * @throws If schema has not been added to ajv (via `finalizeSchema()`)\n * @returns {import('../cli/args').ArgumentDefinitions} A map of arryas of\n * aliases to `argparse` arguments; empty if no schema found\n */\nexport function toParserArgs() {\n  const flattened = flattenSchema().filter(({schema}) => !schema.appiumCliIgnored);\n  return new Map(_.map(flattened, ({schema, argSpec}) => subSchemaToArgDef(schema, argSpec)));\n}\n\n/**\n * @template T\n * @typedef {import('ajv/dist/types').FormatValidator<T>} FormatValidator<T>\n */\n\n/**\n * A JSON 7 schema with our custom keywords.\n * @typedef {import('./keywords').AppiumJSONSchemaKeywords & import('json-schema').JSONSchema7} AppiumJSONSchema\n */\n\n/**\n * @typedef {import('./arg-spec').ArgSpec} ArgSpec\n */\n"],"mappings":"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"}