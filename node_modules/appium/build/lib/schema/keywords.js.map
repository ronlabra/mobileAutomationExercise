{"version":3,"file":"keywords.js","names":["keywords","appiumCliAliases","keyword","metaSchema","type","items","minLength","minItems","uniqueItems","description","appiumCliDest","appiumCliDescription","schemaType","appiumCliTransformer","enum","Object","keys","transformers","appiumCliIgnored","appiumDeprecated","$comment"],"sources":["../../../lib/schema/keywords.js"],"sourcesContent":["import {transformers} from './cli-transformers';\n\n/**\n * Collection of keyword definitions to add to the singleton `Ajv` instance.\n * @type {Record<string,KeywordDefinition>}\n */\nexport const keywords = {\n  /**\n   * Keyword to provide a list of command alias names for the CLI.\n   *\n   * If defined, there must be at least one item in the array and it must be non-empty.\n   * All items in the array must be unique.\n   *\n   * @todo Avoid alias collisions!\n   * @type {KeywordDefinition}\n   * @example\n   * {appiumCliAliases: ['B', 'bobby', 'robert']}\n   */\n  appiumCliAliases: {\n    keyword: 'appiumCliAliases',\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        minLength: 1,\n      },\n      minItems: 1,\n      uniqueItems: true,\n      description:\n        'List of aliases for the argument. Aliases shorter than three (3) characters will be prefixed with a single dash; otherwise two (2).',\n    },\n  },\n  /**\n   * Keyword to provide the name of the property in the destination (parsed\n   * args) object. By default, this value will be whatever the property name is,\n   * but camel-cased. If a flag needs something _other_ than just camel-casing,\n   * use this.\n   * @type {KeywordDefinition}\n   * @example\n   * // for prop 'no-color'\n   * {appiumCliDest: 'NOCOLOR'} // value will be stored as property `NOCOLOR` instead of `noColor`\n   */\n  appiumCliDest: {\n    keyword: 'appiumCliDest',\n    metaSchema: {\n      type: 'string',\n      minLength: 1,\n      description: 'Name of the associated property in the parsed CLI arguments object',\n    },\n  },\n\n  /**\n   * CLI-specific description of the property.  Sometimes the allowed type can\n   * be different enough on the CLI that providing a description written for a\n   * config file context wouldn't make sense.\n   * @type {KeywordDefinition}\n   * @example\n   * {appiumCliDescription: 'This is a comma-delimited string, but in the config file it is an array'}\n   */\n  appiumCliDescription: {\n    keyword: 'appiumCliDescription',\n    schemaType: 'string',\n    metaSchema: {\n      type: 'string',\n      minLength: 1,\n      description: 'Description to provide in the --help text of the CLI. Overrides `description`',\n    },\n  },\n\n  /**\n   * Transformers for CLI args. These usually take strings then do something with them, like\n   * read a file or parse further.\n   * @type {KeywordDefinition}\n   */\n  appiumCliTransformer: {\n    keyword: 'appiumCliTransformer',\n    metaSchema: {\n      type: 'string',\n      enum: Object.keys(transformers),\n      description:\n        'The name of a custom transformer to run against the value as provided via the CLI.',\n    },\n  },\n\n  /**\n   * Flag to tell Appium to _not_ provide this property as a CLI argument.\n   * @type {KeywordDefinition}\n   */\n  appiumCliIgnored: {\n    keyword: 'appiumCliIgnored',\n    metaSchema: {\n      type: 'boolean',\n      description:\n        'If `true`, Appium will not provide this property as a CLI argument. This is NOT the same as a \"hidden\" argument.',\n      enum: [true],\n    },\n  },\n\n  /**\n   * Mark this property as deprecated.\n   * @type {KeywordDefinition}\n   */\n  appiumDeprecated: {\n    keyword: 'appiumDeprecated',\n    metaSchema: {\n      type: 'boolean',\n      description: 'If `true`, this property will be displayed as \"deprecated\" to the user',\n      enum: [true],\n      $comment:\n        'JSON schema draft-2019-09 keyword `deprecated` serves the same purpose. This keyword should itself be deprecated if we move to draft-2019-09!',\n    },\n  },\n};\n\n/**\n * These are the valid values for the `appiumCliTransformer` keyword.\n * Unfortunately, TS cannot infer this in a JS context.  In TS, we'd use\n * `as const` when defining `argTransformers`, then get `keyof typeof argTransformers`. alas.\n * @typedef {'csv'|'json'} AppiumCliTransformerName\n */\n\n/**\n * These are the custom keywords that Appium recognizes.\n *\n * @typedef AppiumJSONSchemaKeywords\n * @property {string} [appiumCliDest]\n * @property {string} [appiumCliDescription]\n * @property {string[]} [appiumCliAliases]\n * @property {boolean} [appiumCliIgnored]\n * @property {AppiumCliTransformerName} [appiumCliTransformer]\n * @property {boolean} [appiumDeprecated]\n */\n\n/**\n * @typedef {import('ajv').KeywordDefinition} KeywordDefinition\n */\n"],"mappings":";;;;;;;;;AAAA;;AAMO,MAAMA,QAAQ,GAAG;EAYtBC,gBAAgB,EAAE;IAChBC,OAAO,EAAE,kBADO;IAEhBC,UAAU,EAAE;MACVC,IAAI,EAAE,OADI;MAEVC,KAAK,EAAE;QACLD,IAAI,EAAE,QADD;QAELE,SAAS,EAAE;MAFN,CAFG;MAMVC,QAAQ,EAAE,CANA;MAOVC,WAAW,EAAE,IAPH;MAQVC,WAAW,EACT;IATQ;EAFI,CAZI;EAoCtBC,aAAa,EAAE;IACbR,OAAO,EAAE,eADI;IAEbC,UAAU,EAAE;MACVC,IAAI,EAAE,QADI;MAEVE,SAAS,EAAE,CAFD;MAGVG,WAAW,EAAE;IAHH;EAFC,CApCO;EAqDtBE,oBAAoB,EAAE;IACpBT,OAAO,EAAE,sBADW;IAEpBU,UAAU,EAAE,QAFQ;IAGpBT,UAAU,EAAE;MACVC,IAAI,EAAE,QADI;MAEVE,SAAS,EAAE,CAFD;MAGVG,WAAW,EAAE;IAHH;EAHQ,CArDA;EAoEtBI,oBAAoB,EAAE;IACpBX,OAAO,EAAE,sBADW;IAEpBC,UAAU,EAAE;MACVC,IAAI,EAAE,QADI;MAEVU,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAYC,6BAAZ,CAFI;MAGVR,WAAW,EACT;IAJQ;EAFQ,CApEA;EAkFtBS,gBAAgB,EAAE;IAChBhB,OAAO,EAAE,kBADO;IAEhBC,UAAU,EAAE;MACVC,IAAI,EAAE,SADI;MAEVK,WAAW,EACT,kHAHQ;MAIVK,IAAI,EAAE,CAAC,IAAD;IAJI;EAFI,CAlFI;EAgGtBK,gBAAgB,EAAE;IAChBjB,OAAO,EAAE,kBADO;IAEhBC,UAAU,EAAE;MACVC,IAAI,EAAE,SADI;MAEVK,WAAW,EAAE,wEAFH;MAGVK,IAAI,EAAE,CAAC,IAAD,CAHI;MAIVM,QAAQ,EACN;IALQ;EAFI;AAhGI,CAAjB"}