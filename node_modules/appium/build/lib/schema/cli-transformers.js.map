{"version":3,"file":"cli-transformers.js","names":["parseCsvLine","value","split","map","v","trim","filter","Boolean","parseCsvFile","flatMap","transformers","csv","csvOrPath","loadedFromFile","existsSync","readFileSync","err","ArgumentTypeError","message","msg","TypeError","json","jsonOrPath","result","JSON","parse","_","isPlainObject","Error","truncate","length","e"],"sources":["../../../lib/schema/cli-transformers.js"],"sourcesContent":["import {ArgumentTypeError} from 'argparse';\nimport {readFileSync, existsSync} from 'fs';\nimport _ from 'lodash';\n\n/**\n * This module provides custom keywords for Appium schemas, as well as\n * \"transformers\" (see `argTransformers` below).\n *\n * Custom keywords are just properties that will appear in a schema (e.g.,\n * `appium-config-schema.js`) beyond what the JSON Schema spec offers.  These\n * are usable by extensions, as well.\n */\n\n/**\n * Splits a CSV string into an array\n * @param {string} value\n * @returns {string[]}\n */\nfunction parseCsvLine(value) {\n  return value\n    .split(',')\n    .map((v) => v.trim())\n    .filter(Boolean);\n}\n\n/**\n * Split a file by newline then calls {@link parseCsvLine} on each line.\n * @param {string} value\n * @returns {string[]}\n */\nfunction parseCsvFile(value) {\n  return value\n    .split(/\\r?\\n/)\n    .map((v) => v.trim())\n    .filter(Boolean)\n    .flatMap(parseCsvLine);\n}\n\n/**\n * Namespace containing _transformers_ for CLI arguments.  \"Validators\" and\n * \"formatters\" do not actually modify the value, but these do.\n *\n * Use case is for when the config file can accept e.g., a `string[]`, but the\n * CLI can only take a `string` (as `argparse` seems to be limited in that\n * fashion; it also cannot understand an argument having multiple types).\n *\n * For example, the `csv` transform takes a `string` and returns a `string[]` by\n * splitting it by comma--_or_ if that `string` happens to be a\n * filepath--reading the file as a `.csv`.\n *\n * This contains some copy-pasted code from `lib/cli/parser-helpers.js`, which was\n * obliterated.\n */\nexport const transformers = {\n  /**\n   * Given a CSV-style string or pathname, parse it into an array.\n   * The file can also be split on newlines.\n   * @param {string} csvOrPath\n   * @returns {string[]}\n   */\n  csv: (csvOrPath) => {\n    let csv = csvOrPath;\n    let loadedFromFile = false;\n    // since this value could be a single string (no commas) _or_ a pathname, we will need\n    // to attempt to parse it as a file _first_.\n    if (existsSync(csvOrPath)) {\n      try {\n        csv = readFileSync(csvOrPath, 'utf8');\n      } catch (err) {\n        throw new ArgumentTypeError(`Could not read file '${csvOrPath}': ${err.message}`);\n      }\n      loadedFromFile = true;\n    }\n\n    try {\n      return loadedFromFile ? parseCsvFile(csv) : parseCsvLine(csv);\n    } catch (err) {\n      const msg = loadedFromFile\n        ? `The provided value of '${csvOrPath}' must be a valid CSV`\n        : `Must be a comma-delimited string, e.g., \"foo,bar,baz\"`;\n      throw new TypeError(`${msg}. Original error: ${err.message}`);\n    }\n  },\n\n  /**\n   * Parse a string which could be a path to a JSON file or a JSON string.\n   * @param {string} jsonOrPath\n   * @returns {object}\n   */\n  json: (jsonOrPath) => {\n    let json = jsonOrPath;\n    let loadedFromFile = false;\n    if (existsSync(jsonOrPath)) {\n      try {\n        // use synchronous file access, as `argparse` provides no way of either\n        // awaiting or using callbacks. This step happens in startup, in what is\n        // effectively command-line code, so nothing is blocked in terms of\n        // sessions, so holding up the event loop does not incur the usual\n        // drawbacks.\n        json = readFileSync(jsonOrPath, 'utf8');\n      } catch (err) {\n        throw new ArgumentTypeError(`Could not read file '${jsonOrPath}': ${err.message}`);\n      }\n      loadedFromFile = true;\n    }\n    try {\n      const result = JSON.parse(json);\n      if (!_.isPlainObject(result)) {\n        throw new Error(`'${_.truncate(result, {length: 100})}' is not an object`);\n      }\n      return result;\n    } catch (e) {\n      const msg = loadedFromFile\n        ? `The provided value of '${jsonOrPath}' must be a valid JSON`\n        : `The provided value must be a valid JSON`;\n      throw new TypeError(`${msg}. Original error: ${e.message}`);\n    }\n  },\n};\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAgBA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;EAC3B,OAAOA,KAAK,CACTC,KADI,CACE,GADF,EAEJC,GAFI,CAECC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAFP,EAGJC,MAHI,CAGGC,OAHH,CAAP;AAID;;AAOD,SAASC,YAAT,CAAsBP,KAAtB,EAA6B;EAC3B,OAAOA,KAAK,CACTC,KADI,CACE,OADF,EAEJC,GAFI,CAECC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAFP,EAGJC,MAHI,CAGGC,OAHH,EAIJE,OAJI,CAIIT,YAJJ,CAAP;AAKD;;AAiBM,MAAMU,YAAY,GAAG;EAO1BC,GAAG,EAAGC,SAAD,IAAe;IAClB,IAAID,GAAG,GAAGC,SAAV;IACA,IAAIC,cAAc,GAAG,KAArB;;IAGA,IAAI,IAAAC,cAAA,EAAWF,SAAX,CAAJ,EAA2B;MACzB,IAAI;QACFD,GAAG,GAAG,IAAAI,gBAAA,EAAaH,SAAb,EAAwB,MAAxB,CAAN;MACD,CAFD,CAEE,OAAOI,GAAP,EAAY;QACZ,MAAM,IAAIC,2BAAJ,CAAuB,wBAAuBL,SAAU,MAAKI,GAAG,CAACE,OAAQ,EAAzE,CAAN;MACD;;MACDL,cAAc,GAAG,IAAjB;IACD;;IAED,IAAI;MACF,OAAOA,cAAc,GAAGL,YAAY,CAACG,GAAD,CAAf,GAAuBX,YAAY,CAACW,GAAD,CAAxD;IACD,CAFD,CAEE,OAAOK,GAAP,EAAY;MACZ,MAAMG,GAAG,GAAGN,cAAc,GACrB,0BAAyBD,SAAU,uBADd,GAErB,uDAFL;MAGA,MAAM,IAAIQ,SAAJ,CAAe,GAAED,GAAI,qBAAoBH,GAAG,CAACE,OAAQ,EAArD,CAAN;IACD;EACF,CA7ByB;EAoC1BG,IAAI,EAAGC,UAAD,IAAgB;IACpB,IAAID,IAAI,GAAGC,UAAX;IACA,IAAIT,cAAc,GAAG,KAArB;;IACA,IAAI,IAAAC,cAAA,EAAWQ,UAAX,CAAJ,EAA4B;MAC1B,IAAI;QAMFD,IAAI,GAAG,IAAAN,gBAAA,EAAaO,UAAb,EAAyB,MAAzB,CAAP;MACD,CAPD,CAOE,OAAON,GAAP,EAAY;QACZ,MAAM,IAAIC,2BAAJ,CAAuB,wBAAuBK,UAAW,MAAKN,GAAG,CAACE,OAAQ,EAA1E,CAAN;MACD;;MACDL,cAAc,GAAG,IAAjB;IACD;;IACD,IAAI;MACF,MAAMU,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAf;;MACA,IAAI,CAACK,eAAA,CAAEC,aAAF,CAAgBJ,MAAhB,CAAL,EAA8B;QAC5B,MAAM,IAAIK,KAAJ,CAAW,IAAGF,eAAA,CAAEG,QAAF,CAAWN,MAAX,EAAmB;UAACO,MAAM,EAAE;QAAT,CAAnB,CAAkC,oBAAhD,CAAN;MACD;;MACD,OAAOP,MAAP;IACD,CAND,CAME,OAAOQ,CAAP,EAAU;MACV,MAAMZ,GAAG,GAAGN,cAAc,GACrB,0BAAyBS,UAAW,wBADf,GAErB,yCAFL;MAGA,MAAM,IAAIF,SAAJ,CAAe,GAAED,GAAI,qBAAoBY,CAAC,CAACb,OAAQ,EAAnD,CAAN;IACD;EACF;AAhEyB,CAArB"}