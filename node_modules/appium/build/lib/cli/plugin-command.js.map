{"version":3,"file":"plugin-command.js","names":["REQ_PLUGIN_FIELDS","PluginCommand","ExtensionCommand","constructor","config","json","knownExtensions","KNOWN_PLUGINS","install","plugin","installType","packageName","_install","installSpec","uninstall","_uninstall","update","unsafe","_update","run","scriptName","extraArgs","_run","getPostInstallText","extName","extData","version","green","validateExtensionFields","pluginMetadata","missingFields","reduce","acc","field","_","isEmpty","Error","JSON","stringify"],"sources":["../../../lib/cli/plugin-command.js"],"sourcesContent":["import _ from 'lodash';\nimport ExtensionCommand from './extension-command';\nimport {KNOWN_PLUGINS} from '../constants';\n\nconst REQ_PLUGIN_FIELDS = ['pluginName', 'mainClass'];\n\n/**\n * @extends {ExtensionCommand<PluginType>}\n */\nexport default class PluginCommand extends ExtensionCommand {\n  /**\n   *\n   * @param {import('./extension-command').ExtensionCommandOptions<PluginType>} opts\n   */\n  constructor({config, json}) {\n    super({config, json});\n    this.knownExtensions = KNOWN_PLUGINS;\n  }\n\n  async install({plugin, installType, packageName}) {\n    return await super._install({\n      installSpec: plugin,\n      installType,\n      packageName,\n    });\n  }\n\n  async uninstall({plugin}) {\n    return await super._uninstall({installSpec: plugin});\n  }\n\n  async update({plugin, unsafe}) {\n    return await super._update({installSpec: plugin, unsafe});\n  }\n\n  async run({plugin, scriptName, extraArgs}) {\n    return await super._run({installSpec: plugin, scriptName, extraArgs});\n  }\n\n  getPostInstallText({extName, extData}) {\n    return `Plugin ${extName}@${extData.version} successfully installed`.green;\n  }\n\n  /**\n   * Validates fields in `appium` field of `driverMetadata`\n   *\n   * For any `package.json` fields which a driver requires, validate the type of\n   * those fields on the `package.json` data, throwing an error if anything is\n   * amiss.\n   * @param {import('appium/types').ExtMetadata<PluginType>} pluginMetadata\n   * @param {string} installSpec\n   * @returns {void}\n   */\n  validateExtensionFields(pluginMetadata, installSpec) {\n    const missingFields = REQ_PLUGIN_FIELDS.reduce(\n      (acc, field) => (pluginMetadata[field] ? acc : [...acc, field]),\n      []\n    );\n\n    if (!_.isEmpty(missingFields)) {\n      throw new Error(\n        `Installed plugin \"${installSpec}\" did not expose correct fields for compability ` +\n          `with Appium. Missing fields: ${JSON.stringify(missingFields)}`\n      );\n    }\n  }\n}\n\n/**\n * @typedef {import('@appium/types').PluginType} PluginType\n */\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,iBAAiB,GAAG,CAAC,YAAD,EAAe,WAAf,CAA1B;;AAKe,MAAMC,aAAN,SAA4BC,yBAA5B,CAA6C;EAK1DC,WAAW,CAAC;IAACC,MAAD;IAASC;EAAT,CAAD,EAAiB;IAC1B,MAAM;MAACD,MAAD;MAASC;IAAT,CAAN;IACA,KAAKC,eAAL,GAAuBC,wBAAvB;EACD;;EAEY,MAAPC,OAAO,CAAC;IAACC,MAAD;IAASC,WAAT;IAAsBC;EAAtB,CAAD,EAAqC;IAChD,OAAO,MAAM,MAAMC,QAAN,CAAe;MAC1BC,WAAW,EAAEJ,MADa;MAE1BC,WAF0B;MAG1BC;IAH0B,CAAf,CAAb;EAKD;;EAEc,MAATG,SAAS,CAAC;IAACL;EAAD,CAAD,EAAW;IACxB,OAAO,MAAM,MAAMM,UAAN,CAAiB;MAACF,WAAW,EAAEJ;IAAd,CAAjB,CAAb;EACD;;EAEW,MAANO,MAAM,CAAC;IAACP,MAAD;IAASQ;EAAT,CAAD,EAAmB;IAC7B,OAAO,MAAM,MAAMC,OAAN,CAAc;MAACL,WAAW,EAAEJ,MAAd;MAAsBQ;IAAtB,CAAd,CAAb;EACD;;EAEQ,MAAHE,GAAG,CAAC;IAACV,MAAD;IAASW,UAAT;IAAqBC;EAArB,CAAD,EAAkC;IACzC,OAAO,MAAM,MAAMC,IAAN,CAAW;MAACT,WAAW,EAAEJ,MAAd;MAAsBW,UAAtB;MAAkCC;IAAlC,CAAX,CAAb;EACD;;EAEDE,kBAAkB,CAAC;IAACC,OAAD;IAAUC;EAAV,CAAD,EAAqB;IACrC,OAAQ,UAASD,OAAQ,IAAGC,OAAO,CAACC,OAAQ,yBAArC,CAA8DC,KAArE;EACD;;EAYDC,uBAAuB,CAACC,cAAD,EAAiBhB,WAAjB,EAA8B;IACnD,MAAMiB,aAAa,GAAG9B,iBAAiB,CAAC+B,MAAlB,CACpB,CAACC,GAAD,EAAMC,KAAN,KAAiBJ,cAAc,CAACI,KAAD,CAAd,GAAwBD,GAAxB,GAA8B,CAAC,GAAGA,GAAJ,EAASC,KAAT,CAD3B,EAEpB,EAFoB,CAAtB;;IAKA,IAAI,CAACC,eAAA,CAAEC,OAAF,CAAUL,aAAV,CAAL,EAA+B;MAC7B,MAAM,IAAIM,KAAJ,CACH,qBAAoBvB,WAAY,kDAAjC,GACG,gCAA+BwB,IAAI,CAACC,SAAL,CAAeR,aAAf,CAA8B,EAF5D,CAAN;IAID;EACF;;AAxDyD"}