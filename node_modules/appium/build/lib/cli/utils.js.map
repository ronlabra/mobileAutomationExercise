{"version":3,"file":"utils.js","names":["JSON_SPACES","errAndQuit","json","msg","console","log","JSON","stringify","error","red","stderr","process","exit","spinWith","fn","spinner","ora","start","res","succeed","err","fail","RingBuffer","constructor","size","buffer","getBuff","dequeue","shift","enqueue","item","length","push"],"sources":["../../../lib/cli/utils.js"],"sourcesContent":["/* eslint-disable no-console */\n\nimport ora from 'ora';\n\nconst JSON_SPACES = 4;\n\n/***\n * Log an error to the console and exit the process.\n * @param {boolean} json - whether we should log json or text\n * @param {any} msg - error message, object, Error instance, etc.\n */\nfunction errAndQuit(json, msg) {\n  if (json) {\n    console.log(JSON.stringify({error: `${msg}`}, null, JSON_SPACES));\n  } else {\n    console.error(`${msg}`.red);\n    if (msg.stderr) {\n      console.error(`${msg.stderr}`.red);\n    }\n  }\n  process.exit(1);\n}\n\n/**\n * Conditionally log something to the console\n * @param {boolean} json - whether we are in json mode (and should therefore not log)\n * @param {string} msg - string to log\n */\nfunction log(json, msg) {\n  !json && console.log(msg);\n}\n\n/**\n * Start a spinner, execute an async function, and then stop the spinner\n * @param {boolean} json - whether we are in json mode (and should therefore not log)\n * @param {string} msg - string to log\n * @param {function} fn - function to wrap with spinning\n */\nasync function spinWith(json, msg, fn) {\n  if (json) {\n    return await fn();\n  }\n  const spinner = ora(msg).start();\n  let res;\n  try {\n    res = await fn();\n    spinner.succeed();\n    return res;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nclass RingBuffer {\n  constructor(size = 50) {\n    this.size = size;\n    this.buffer = [];\n  }\n  getBuff() {\n    return this.buffer;\n  }\n  dequeue() {\n    this.buffer.shift();\n  }\n  enqueue(item) {\n    if (this.buffer.length >= this.size) {\n      this.dequeue();\n    }\n    this.buffer.push(item);\n  }\n}\n\nexport {errAndQuit, log, spinWith, JSON_SPACES, RingBuffer};\n"],"mappings":";;;;;;;;;;;;AAEA;;;;AAEA,MAAMA,WAAW,GAAG,CAApB;;;AAOA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,GAA1B,EAA+B;EAC7B,IAAID,IAAJ,EAAU;IACRE,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe;MAACC,KAAK,EAAG,GAAEL,GAAI;IAAf,CAAf,EAAkC,IAAlC,EAAwCH,WAAxC,CAAZ;EACD,CAFD,MAEO;IACLI,OAAO,CAACI,KAAR,CAAe,GAAEL,GAAI,EAAP,CAASM,GAAvB;;IACA,IAAIN,GAAG,CAACO,MAAR,EAAgB;MACdN,OAAO,CAACI,KAAR,CAAe,GAAEL,GAAG,CAACO,MAAO,EAAd,CAAgBD,GAA9B;IACD;EACF;;EACDE,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAOD,SAASP,GAAT,CAAaH,IAAb,EAAmBC,GAAnB,EAAwB;EACtB,CAACD,IAAD,IAASE,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AACD;;AAQD,eAAeU,QAAf,CAAwBX,IAAxB,EAA8BC,GAA9B,EAAmCW,EAAnC,EAAuC;EACrC,IAAIZ,IAAJ,EAAU;IACR,OAAO,MAAMY,EAAE,EAAf;EACD;;EACD,MAAMC,OAAO,GAAG,IAAAC,YAAA,EAAIb,GAAJ,EAASc,KAAT,EAAhB;EACA,IAAIC,GAAJ;;EACA,IAAI;IACFA,GAAG,GAAG,MAAMJ,EAAE,EAAd;IACAC,OAAO,CAACI,OAAR;IACA,OAAOD,GAAP;EACD,CAJD,CAIE,OAAOE,GAAP,EAAY;IACZL,OAAO,CAACM,IAAR;IACA,MAAMD,GAAN;EACD;AACF;;AAED,MAAME,UAAN,CAAiB;EACfC,WAAW,CAACC,IAAI,GAAG,EAAR,EAAY;IACrB,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAc,EAAd;EACD;;EACDC,OAAO,GAAG;IACR,OAAO,KAAKD,MAAZ;EACD;;EACDE,OAAO,GAAG;IACR,KAAKF,MAAL,CAAYG,KAAZ;EACD;;EACDC,OAAO,CAACC,IAAD,EAAO;IACZ,IAAI,KAAKL,MAAL,CAAYM,MAAZ,IAAsB,KAAKP,IAA/B,EAAqC;MACnC,KAAKG,OAAL;IACD;;IACD,KAAKF,MAAL,CAAYO,IAAZ,CAAiBF,IAAjB;EACD;;AAhBc"}