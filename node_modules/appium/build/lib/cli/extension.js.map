{"version":3,"file":"extension.js","names":["commandClasses","Object","freeze","DRIVER_TYPE","DriverCommand","PLUGIN_TYPE","PluginCommand","runExtensionCommand","args","config","jsonResult","extensionType","type","extCmd","TypeError","json","suppressOutput","Boolean","CommandClass","cmd","execute","err","errAndQuit","console","log","JSON","stringify","JSON_SPACES"],"sources":["../../../lib/cli/extension.js"],"sourcesContent":["/* eslint-disable no-console */\nimport DriverCommand from './driver-command';\nimport PluginCommand from './plugin-command';\nimport {DRIVER_TYPE, PLUGIN_TYPE} from '../constants';\nimport {errAndQuit, JSON_SPACES} from './utils';\n\nexport const commandClasses = Object.freeze(\n  /** @type {const} */ ({\n    [DRIVER_TYPE]: DriverCommand,\n    [PLUGIN_TYPE]: PluginCommand,\n  })\n);\n\n/**\n * Run a subcommand of the 'appium driver' type. Each subcommand has its own set of arguments which\n * can be represented as a JS object.\n *\n * @param {import('appium/types').Args<import('appium/types').WithExtSubcommand>} args - JS object where the key is the parameter name (as defined in\n * driver-parser.js)\n * @template {ExtensionType} ExtType\n * @param {import('../extension/extension-config').ExtensionConfig<ExtType>} config - Extension config object\n */\nasync function runExtensionCommand(args, config) {\n  // TODO driver config file should be locked while any of these commands are\n  // running to prevent weird situations\n  let jsonResult = null;\n  const {extensionType: type} = config;\n  const extCmd = args[`${type}Command`];\n  if (!extCmd) {\n    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);\n  }\n  let {json, suppressOutput} = args;\n  json = Boolean(json);\n  if (suppressOutput) {\n    json = true;\n  }\n  const CommandClass = /** @type {ExtCommand<ExtType>} */ (commandClasses[type]);\n  const cmd = new CommandClass({config, json});\n  try {\n    jsonResult = await cmd.execute(args);\n  } catch (err) {\n    // in the suppress output case, we are calling this function internally and should\n    // just throw instead of printing an error and ending the process\n    if (suppressOutput) {\n      throw err;\n    }\n    errAndQuit(json, err);\n  }\n\n  if (json && !suppressOutput) {\n    console.log(JSON.stringify(jsonResult, null, JSON_SPACES));\n  }\n\n  return jsonResult;\n}\n\nexport {runExtensionCommand};\n\n/**\n * @template {ExtensionType} ExtType\n * @typedef {ExtType extends DriverType ? Class<DriverCommand> : ExtType extends PluginType ? Class<PluginCommand> : never} ExtCommand\n */\n\n/**\n * @typedef {import('@appium/types').ExtensionType} ExtensionType\n * @typedef {import('@appium/types').DriverType} DriverType\n * @typedef {import('@appium/types').PluginType} PluginType\n */\n\n/**\n * @template T\n * @typedef {import('@appium/types').Class<T>} Class\n */\n"],"mappings":";;;;;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,cAAc,GAAGC,MAAM,CAACC,MAAP,CACN;EACpB,CAACC,sBAAD,GAAeC,sBADK;EAEpB,CAACC,sBAAD,GAAeC;AAFK,CADM,CAAvB;;;AAgBP,eAAeC,mBAAf,CAAmCC,IAAnC,EAAyCC,MAAzC,EAAiD;EAG/C,IAAIC,UAAU,GAAG,IAAjB;EACA,MAAM;IAACC,aAAa,EAAEC;EAAhB,IAAwBH,MAA9B;EACA,MAAMI,MAAM,GAAGL,IAAI,CAAE,GAAEI,IAAK,SAAT,CAAnB;;EACA,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAIC,SAAJ,CAAe,eAAcF,IAAK,8CAAlC,CAAN;EACD;;EACD,IAAI;IAACG,IAAD;IAAOC;EAAP,IAAyBR,IAA7B;EACAO,IAAI,GAAGE,OAAO,CAACF,IAAD,CAAd;;EACA,IAAIC,cAAJ,EAAoB;IAClBD,IAAI,GAAG,IAAP;EACD;;EACD,MAAMG,YAAY,GAAuClB,cAAc,CAACY,IAAD,CAAvE;EACA,MAAMO,GAAG,GAAG,IAAID,YAAJ,CAAiB;IAACT,MAAD;IAASM;EAAT,CAAjB,CAAZ;;EACA,IAAI;IACFL,UAAU,GAAG,MAAMS,GAAG,CAACC,OAAJ,CAAYZ,IAAZ,CAAnB;EACD,CAFD,CAEE,OAAOa,GAAP,EAAY;IAGZ,IAAIL,cAAJ,EAAoB;MAClB,MAAMK,GAAN;IACD;;IACD,IAAAC,iBAAA,EAAWP,IAAX,EAAiBM,GAAjB;EACD;;EAED,IAAIN,IAAI,IAAI,CAACC,cAAb,EAA6B;IAC3BO,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAehB,UAAf,EAA2B,IAA3B,EAAiCiB,kBAAjC,CAAZ;EACD;;EAED,OAAOjB,UAAP;AACD"}