{"version":3,"file":"parser.js","names":["EXTRA_ARGS","NON_SERVER_ARGS","Object","freeze","Set","DRIVER_TYPE","PLUGIN_TYPE","SERVER_SUBCOMMAND","version","fs","readPackageJsonFrom","rootDir","ArgParser","constructor","debug","prog","process","argv","path","basename","parser","ArgumentParser","add_help","description","_patchExit","add_argument","action","subParsers","add_subparsers","dest","serverArgs","_addServerToParser","rawArgs","_addExtensionCommandsToParser","parse_args","parseArgs","args","slice","has","unshift","parsed","parse_known_args","knownArgs","unknownArgs","length","driverCommand","pluginCommand","_transformParsedArgs","Error","join","err","console","error","message","exit","result","_","reduce","unpacked","value","key","isUndefined","hasArgSpec","getArgSpec","set","code","msg","subParser","serverParser","add_parser","help","getServerArgs","flagsOrNames","opts","type","extParser","extSubParsers","extensionArgs","getExtensionArgs","parserSpecs","command","list","install","uninstall","update","run","getParser","finalizeSchema"],"sources":["../../../lib/cli/parser.js"],"sourcesContent":["import {fs} from '@appium/support';\nimport {ArgumentParser} from 'argparse';\nimport _ from 'lodash';\nimport path from 'path';\nimport {DRIVER_TYPE, PLUGIN_TYPE, SERVER_SUBCOMMAND} from '../constants';\nimport {finalizeSchema, getArgSpec, hasArgSpec} from '../schema';\nimport {rootDir} from '../config';\nimport {getExtensionArgs, getServerArgs} from './args';\n\nexport const EXTRA_ARGS = 'extraArgs';\n\n/**\n * If the parsed args do not contain any of these values, then we\n * will automatially inject the `server` subcommand.\n */\nconst NON_SERVER_ARGS = Object.freeze(\n  new Set([DRIVER_TYPE, PLUGIN_TYPE, SERVER_SUBCOMMAND, '-h', '--help', '-v', '--version'])\n);\n\nconst version = fs.readPackageJsonFrom(rootDir).version;\n\n/**\n * A wrapper around `argparse`\n *\n * - Handles instantiation, configuration, and monkeypatching of an\n *    `ArgumentParser` instance for Appium server and its extensions\n * - Handles error conditions, messages, and exit behavior\n */\nclass ArgParser {\n  /**\n   * @param {boolean} [debug] - If true, throw instead of exit on error.\n   */\n  constructor(debug = false) {\n    const prog = process.argv[1] ? path.basename(process.argv[1]) : 'appium';\n    const parser = new ArgumentParser({\n      add_help: true,\n      description:\n        'A webdriver-compatible server that facilitates automation of web, mobile, and other types of apps across various platforms.',\n      prog,\n    });\n\n    ArgParser._patchExit(parser);\n\n    /**\n     * Program name (typically `appium`)\n     * @type {string}\n     */\n    this.prog = prog;\n\n    /**\n     * If `true`, throw an error on parse failure instead of printing help\n     * @type {boolean}\n     */\n    this.debug = debug;\n\n    /**\n     * Wrapped `ArgumentParser` instance\n     * @type {ArgumentParser}\n     */\n    this.parser = parser;\n\n    parser.add_argument('-v', '--version', {\n      action: 'version',\n      version,\n    });\n\n    const subParsers = parser.add_subparsers({dest: 'subcommand'});\n\n    // add the 'server' subcommand, and store the raw arguments on the parser\n    // object as a way for other parts of the code to work with the arguments\n    // conceptually rather than just through argparse\n    const serverArgs = ArgParser._addServerToParser(subParsers);\n\n    this.rawArgs = serverArgs;\n\n    // add the 'driver' and 'plugin' subcommands\n    ArgParser._addExtensionCommandsToParser(subParsers);\n\n    // backwards compatibility / drop-in wrapper\n    /**\n     * @type {ArgParser['parseArgs']}\n     */\n    this.parse_args = this.parseArgs;\n  }\n\n  /**\n   * Parse arguments from the command line.\n   *\n   * If no subcommand is passed in, this method will inject the `server` subcommand.\n   *\n   * `ArgParser.prototype.parse_args` is an alias of this method.\n   * @template [T=import('appium/types').WithServerSubcommand]\n   * @param {string[]} [args] - Array of arguments, ostensibly from `process.argv`. Gathers args from `process.argv` if not provided.\n   * @returns {import('appium/types').Args<T>} - The parsed arguments\n   */\n  parseArgs(args = process.argv.slice(2)) {\n    if (!NON_SERVER_ARGS.has(args[0])) {\n      args.unshift(SERVER_SUBCOMMAND);\n    }\n\n    try {\n      const parsed = this.parser.parse_known_args(args);\n      const [knownArgs, unknownArgs] = parsed;\n      if (\n        unknownArgs?.length &&\n        (knownArgs.driverCommand === 'run' || knownArgs.pluginCommand === 'run')\n      ) {\n        return ArgParser._transformParsedArgs(knownArgs, unknownArgs);\n      } else if (unknownArgs?.length) {\n        throw new Error(`[ERROR] Unrecognized arguments: ${unknownArgs.join(' ')}`);\n      }\n      return ArgParser._transformParsedArgs(knownArgs);\n    } catch (err) {\n      if (this.debug) {\n        throw err;\n      }\n      // this isn't tested via unit tests (we use `debug: true`) so may escape coverage.\n\n      /* istanbul ignore next */\n      {\n        // eslint-disable-next-line no-console\n        console.error(); // need an extra space since argparse prints usage.\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  /**\n   * Given an object full of arguments as returned by `argparser.parse_args`,\n   * expand the ones for extensions into a nested object structure and rename\n   * keys to match the intended destination.\n   *\n   * E.g., `{'driver-foo-bar': baz}` becomes `{driver: {foo: {bar: 'baz'}}}`\n   * @param {object} args\n   * @param {string[]} [unknownArgs]\n   * @returns {object}\n   */\n  static _transformParsedArgs(args, unknownArgs = []) {\n    const result = _.reduce(\n      args,\n      (unpacked, value, key) => {\n        if (!_.isUndefined(value) && hasArgSpec(key)) {\n          const {dest} = /** @type {import('../schema/arg-spec').ArgSpec} */ (getArgSpec(key));\n          _.set(unpacked, dest, value);\n        } else {\n          // this could be anything that _isn't_ a server arg\n          unpacked[key] = value;\n        }\n        return unpacked;\n      },\n      {}\n    );\n    result[EXTRA_ARGS] = unknownArgs;\n    return result;\n  }\n\n  /**\n   * Patches the `exit()` method of the parser to throw an error, so we can handle it manually.\n   * @param {ArgumentParser} parser\n   */\n  static _patchExit(parser) {\n    parser.exit = (code, msg) => {\n      if (code) {\n        throw new Error(msg);\n      }\n      process.exit();\n    };\n  }\n\n  /**\n   *\n   * @param {import('argparse').SubParser} subParser\n   * @returns {import('./args').ArgumentDefinitions}\n   */\n  static _addServerToParser(subParser) {\n    const serverParser = subParser.add_parser('server', {\n      add_help: true,\n      help: 'Run an Appium server',\n    });\n\n    ArgParser._patchExit(serverParser);\n\n    const serverArgs = getServerArgs();\n    for (const [flagsOrNames, opts] of serverArgs) {\n      // TS doesn't like the spread operator here.\n      // @ts-ignore\n      serverParser.add_argument(...flagsOrNames, {...opts});\n    }\n\n    return serverArgs;\n  }\n\n  /**\n   * Adds extension sub-sub-commands to `driver`/`plugin` subcommands\n   * @param {import('argparse').SubParser} subParsers\n   */\n  static _addExtensionCommandsToParser(subParsers) {\n    for (const type of /** @type {[DriverType, PluginType]} */ ([DRIVER_TYPE, PLUGIN_TYPE])) {\n      const extParser = subParsers.add_parser(type, {\n        add_help: true,\n        help: `Access the ${type} management CLI commands`,\n      });\n\n      ArgParser._patchExit(extParser);\n\n      const extSubParsers = extParser.add_subparsers({\n        dest: `${type}Command`,\n      });\n      const extensionArgs = getExtensionArgs();\n      /**\n       * @type { {command: import('appium/types').CliExtensionSubcommand, args: import('./args').ArgumentDefinitions, help: string}[] }\n       */\n      const parserSpecs = [\n        {\n          command: 'list',\n          args: extensionArgs[type].list,\n          help: `List available and installed ${type}s`,\n        },\n        {\n          command: 'install',\n          args: extensionArgs[type].install,\n          help: `Install a ${type}`,\n        },\n        {\n          command: 'uninstall',\n          args: extensionArgs[type].uninstall,\n          help: `Uninstall a ${type}`,\n        },\n        {\n          command: 'update',\n          args: extensionArgs[type].update,\n          help: `Update installed ${type}s to the latest version`,\n        },\n        {\n          command: 'run',\n          args: extensionArgs[type].run,\n          help:\n            `Run a script (defined inside the ${type}'s package.json under the ` +\n            `“scripts” field inside the “appium” field) from an installed ${type}`,\n        },\n      ];\n\n      for (const {command, args, help} of parserSpecs) {\n        const parser = extSubParsers.add_parser(command, {help});\n\n        ArgParser._patchExit(parser);\n\n        for (const [flagsOrNames, opts] of args) {\n          // add_argument mutates params so make sure to send in copies instead\n          // @ts-ignore\n          parser.add_argument(...flagsOrNames, {...opts});\n        }\n      }\n    }\n  }\n}\n\n/**\n * Creates a {@link ArgParser} instance; finalizes the config schema.\n *\n * @constructs ArgParser\n * @param {boolean} [debug] - If `true`, throw instead of exit upon parsing error\n * @returns {ArgParser}\n */\nfunction getParser(debug) {\n  finalizeSchema();\n\n  return new ArgParser(debug);\n}\n\nexport {getParser, ArgParser};\n\n/**\n * @typedef {import('@appium/types').DriverType} DriverType\n * @typedef {import('@appium/types').PluginType} PluginType\n */\n"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,UAAU,GAAG,WAAnB;;AAMP,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CACtB,IAAIC,GAAJ,CAAQ,CAACC,sBAAD,EAAcC,sBAAd,EAA2BC,4BAA3B,EAA8C,IAA9C,EAAoD,QAApD,EAA8D,IAA9D,EAAoE,WAApE,CAAR,CADsB,CAAxB;;AAIA,MAAMC,OAAO,GAAGC,WAAA,CAAGC,mBAAH,CAAuBC,eAAvB,EAAgCH,OAAhD;;AASA,MAAMI,SAAN,CAAgB;EAIdC,WAAW,CAACC,KAAK,GAAG,KAAT,EAAgB;IACzB,MAAMC,IAAI,GAAGC,OAAO,CAACC,IAAR,CAAa,CAAb,IAAkBC,aAAA,CAAKC,QAAL,CAAcH,OAAO,CAACC,IAAR,CAAa,CAAb,CAAd,CAAlB,GAAmD,QAAhE;IACA,MAAMG,MAAM,GAAG,IAAIC,wBAAJ,CAAmB;MAChCC,QAAQ,EAAE,IADsB;MAEhCC,WAAW,EACT,6HAH8B;MAIhCR;IAJgC,CAAnB,CAAf;;IAOAH,SAAS,CAACY,UAAV,CAAqBJ,MAArB;;IAMA,KAAKL,IAAL,GAAYA,IAAZ;IAMA,KAAKD,KAAL,GAAaA,KAAb;IAMA,KAAKM,MAAL,GAAcA,MAAd;IAEAA,MAAM,CAACK,YAAP,CAAoB,IAApB,EAA0B,WAA1B,EAAuC;MACrCC,MAAM,EAAE,SAD6B;MAErClB;IAFqC,CAAvC;IAKA,MAAMmB,UAAU,GAAGP,MAAM,CAACQ,cAAP,CAAsB;MAACC,IAAI,EAAE;IAAP,CAAtB,CAAnB;;IAKA,MAAMC,UAAU,GAAGlB,SAAS,CAACmB,kBAAV,CAA6BJ,UAA7B,CAAnB;;IAEA,KAAKK,OAAL,GAAeF,UAAf;;IAGAlB,SAAS,CAACqB,6BAAV,CAAwCN,UAAxC;;IAMA,KAAKO,UAAL,GAAkB,KAAKC,SAAvB;EACD;;EAYDA,SAAS,CAACC,IAAI,GAAGpB,OAAO,CAACC,IAAR,CAAaoB,KAAb,CAAmB,CAAnB,CAAR,EAA+B;IACtC,IAAI,CAACpC,eAAe,CAACqC,GAAhB,CAAoBF,IAAI,CAAC,CAAD,CAAxB,CAAL,EAAmC;MACjCA,IAAI,CAACG,OAAL,CAAahC,4BAAb;IACD;;IAED,IAAI;MACF,MAAMiC,MAAM,GAAG,KAAKpB,MAAL,CAAYqB,gBAAZ,CAA6BL,IAA7B,CAAf;MACA,MAAM,CAACM,SAAD,EAAYC,WAAZ,IAA2BH,MAAjC;;MACA,IACEG,WAAW,SAAX,IAAAA,WAAW,WAAX,IAAAA,WAAW,CAAEC,MAAb,KACCF,SAAS,CAACG,aAAV,KAA4B,KAA5B,IAAqCH,SAAS,CAACI,aAAV,KAA4B,KADlE,CADF,EAGE;QACA,OAAOlC,SAAS,CAACmC,oBAAV,CAA+BL,SAA/B,EAA0CC,WAA1C,CAAP;MACD,CALD,MAKO,IAAIA,WAAJ,aAAIA,WAAJ,eAAIA,WAAW,CAAEC,MAAjB,EAAyB;QAC9B,MAAM,IAAII,KAAJ,CAAW,mCAAkCL,WAAW,CAACM,IAAZ,CAAiB,GAAjB,CAAsB,EAAnE,CAAN;MACD;;MACD,OAAOrC,SAAS,CAACmC,oBAAV,CAA+BL,SAA/B,CAAP;IACD,CAZD,CAYE,OAAOQ,GAAP,EAAY;MACZ,IAAI,KAAKpC,KAAT,EAAgB;QACd,MAAMoC,GAAN;MACD;;MAID;QAEEC,OAAO,CAACC,KAAR;QAEAD,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;QACArC,OAAO,CAACsC,IAAR,CAAa,CAAb;MACD;IACF;EACF;;EAY0B,OAApBP,oBAAoB,CAACX,IAAD,EAAOO,WAAW,GAAG,EAArB,EAAyB;IAClD,MAAMY,MAAM,GAAGC,eAAA,CAAEC,MAAF,CACbrB,IADa,EAEb,CAACsB,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,KAA0B;MACxB,IAAI,CAACJ,eAAA,CAAEK,WAAF,CAAcF,KAAd,CAAD,IAAyB,IAAAG,kBAAA,EAAWF,GAAX,CAA7B,EAA8C;QAC5C,MAAM;UAAC/B;QAAD,IAA8D,IAAAkC,kBAAA,EAAWH,GAAX,CAApE;;QACAJ,eAAA,CAAEQ,GAAF,CAAMN,QAAN,EAAgB7B,IAAhB,EAAsB8B,KAAtB;MACD,CAHD,MAGO;QAELD,QAAQ,CAACE,GAAD,CAAR,GAAgBD,KAAhB;MACD;;MACD,OAAOD,QAAP;IACD,CAXY,EAYb,EAZa,CAAf;;IAcAH,MAAM,CAACvD,UAAD,CAAN,GAAqB2C,WAArB;IACA,OAAOY,MAAP;EACD;;EAMgB,OAAV/B,UAAU,CAACJ,MAAD,EAAS;IACxBA,MAAM,CAACkC,IAAP,GAAc,CAACW,IAAD,EAAOC,GAAP,KAAe;MAC3B,IAAID,IAAJ,EAAU;QACR,MAAM,IAAIjB,KAAJ,CAAUkB,GAAV,CAAN;MACD;;MACDlD,OAAO,CAACsC,IAAR;IACD,CALD;EAMD;;EAOwB,OAAlBvB,kBAAkB,CAACoC,SAAD,EAAY;IACnC,MAAMC,YAAY,GAAGD,SAAS,CAACE,UAAV,CAAqB,QAArB,EAA+B;MAClD/C,QAAQ,EAAE,IADwC;MAElDgD,IAAI,EAAE;IAF4C,CAA/B,CAArB;;IAKA1D,SAAS,CAACY,UAAV,CAAqB4C,YAArB;;IAEA,MAAMtC,UAAU,GAAG,IAAAyC,mBAAA,GAAnB;;IACA,KAAK,MAAM,CAACC,YAAD,EAAeC,IAAf,CAAX,IAAmC3C,UAAnC,EAA+C;MAG7CsC,YAAY,CAAC3C,YAAb,CAA0B,GAAG+C,YAA7B,EAA2C,EAAC,GAAGC;MAAJ,CAA3C;IACD;;IAED,OAAO3C,UAAP;EACD;;EAMmC,OAA7BG,6BAA6B,CAACN,UAAD,EAAa;IAC/C,KAAK,MAAM+C,IAAX,IAA4D,CAACrE,sBAAD,EAAcC,sBAAd,CAA5D,EAAyF;MACvF,MAAMqE,SAAS,GAAGhD,UAAU,CAAC0C,UAAX,CAAsBK,IAAtB,EAA4B;QAC5CpD,QAAQ,EAAE,IADkC;QAE5CgD,IAAI,EAAG,cAAaI,IAAK;MAFmB,CAA5B,CAAlB;;MAKA9D,SAAS,CAACY,UAAV,CAAqBmD,SAArB;;MAEA,MAAMC,aAAa,GAAGD,SAAS,CAAC/C,cAAV,CAAyB;QAC7CC,IAAI,EAAG,GAAE6C,IAAK;MAD+B,CAAzB,CAAtB;MAGA,MAAMG,aAAa,GAAG,IAAAC,sBAAA,GAAtB;MAIA,MAAMC,WAAW,GAAG,CAClB;QACEC,OAAO,EAAE,MADX;QAEE5C,IAAI,EAAEyC,aAAa,CAACH,IAAD,CAAb,CAAoBO,IAF5B;QAGEX,IAAI,EAAG,gCAA+BI,IAAK;MAH7C,CADkB,EAMlB;QACEM,OAAO,EAAE,SADX;QAEE5C,IAAI,EAAEyC,aAAa,CAACH,IAAD,CAAb,CAAoBQ,OAF5B;QAGEZ,IAAI,EAAG,aAAYI,IAAK;MAH1B,CANkB,EAWlB;QACEM,OAAO,EAAE,WADX;QAEE5C,IAAI,EAAEyC,aAAa,CAACH,IAAD,CAAb,CAAoBS,SAF5B;QAGEb,IAAI,EAAG,eAAcI,IAAK;MAH5B,CAXkB,EAgBlB;QACEM,OAAO,EAAE,QADX;QAEE5C,IAAI,EAAEyC,aAAa,CAACH,IAAD,CAAb,CAAoBU,MAF5B;QAGEd,IAAI,EAAG,oBAAmBI,IAAK;MAHjC,CAhBkB,EAqBlB;QACEM,OAAO,EAAE,KADX;QAEE5C,IAAI,EAAEyC,aAAa,CAACH,IAAD,CAAb,CAAoBW,GAF5B;QAGEf,IAAI,EACD,oCAAmCI,IAAK,4BAAzC,GACC,gEAA+DA,IAAK;MALzE,CArBkB,CAApB;;MA8BA,KAAK,MAAM;QAACM,OAAD;QAAU5C,IAAV;QAAgBkC;MAAhB,CAAX,IAAoCS,WAApC,EAAiD;QAC/C,MAAM3D,MAAM,GAAGwD,aAAa,CAACP,UAAd,CAAyBW,OAAzB,EAAkC;UAACV;QAAD,CAAlC,CAAf;;QAEA1D,SAAS,CAACY,UAAV,CAAqBJ,MAArB;;QAEA,KAAK,MAAM,CAACoD,YAAD,EAAeC,IAAf,CAAX,IAAmCrC,IAAnC,EAAyC;UAGvChB,MAAM,CAACK,YAAP,CAAoB,GAAG+C,YAAvB,EAAqC,EAAC,GAAGC;UAAJ,CAArC;QACD;MACF;IACF;EACF;;AApOa;;;;AA8OhB,SAASa,SAAT,CAAmBxE,KAAnB,EAA0B;EACxB,IAAAyE,sBAAA;EAEA,OAAO,IAAI3E,SAAJ,CAAcE,KAAd,CAAP;AACD"}