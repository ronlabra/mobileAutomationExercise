{"version":3,"file":"args.js","names":["DRIVER_EXAMPLE","PLUGIN_EXAMPLE","INSTALL_TYPES_ARRAY","INSTALL_TYPES","EXTENSION_TYPES","Set","DRIVER_TYPE","PLUGIN_TYPE","globalExtensionArgs","Map","required","default","action","help","dest","getExtensionArgs","_","memoize","extensionArgs","type","EXT_SUBCOMMAND_LIST","makeListArgs","EXT_SUBCOMMAND_INSTALL","makeInstallArgs","EXT_SUBCOMMAND_UNINSTALL","makeUninstallArgs","EXT_SUBCOMMAND_UPDATE","makeUpdateArgs","EXT_SUBCOMMAND_RUN","makeRunArgs","choices","join","getServerArgs","toParserArgs","serverArgsDisallowedInConfig","const"],"sources":["../../../lib/cli/args.js"],"sourcesContent":["import _ from 'lodash';\nimport {\n  DRIVER_TYPE,\n  PLUGIN_TYPE,\n  EXT_SUBCOMMAND_INSTALL,\n  EXT_SUBCOMMAND_LIST,\n  EXT_SUBCOMMAND_RUN,\n  EXT_SUBCOMMAND_UNINSTALL,\n  EXT_SUBCOMMAND_UPDATE,\n} from '../constants';\nimport {INSTALL_TYPES} from '../extension/extension-config';\nimport {toParserArgs} from '../schema/cli-args';\nconst DRIVER_EXAMPLE = 'xcuitest';\nconst PLUGIN_EXAMPLE = 'find_by_image';\n\n/**\n * This is necessary because we pass the array into `argparse`. `argparse` is bad and mutates things. We don't want that.\n * Bad `argparse`! Bad!\n */\nconst INSTALL_TYPES_ARRAY = [...INSTALL_TYPES];\n\n/** @type {Set<ExtensionType>} */\nconst EXTENSION_TYPES = new Set([DRIVER_TYPE, PLUGIN_TYPE]);\n\n// this set of args works for both drivers and plugins ('extensions')\n/** @type {ArgumentDefinitions} */\nconst globalExtensionArgs = new Map([\n  [\n    ['--json'],\n    {\n      required: false,\n      default: false,\n      action: 'store_true',\n      help: 'Use JSON for output format',\n      dest: 'json',\n    },\n  ],\n]);\n\n/**\n * Builds a Record of extension types to a Record of subcommands to their argument definitions\n */\nconst getExtensionArgs = _.memoize(function getExtensionArgs() {\n  const extensionArgs = {};\n  for (const type of EXTENSION_TYPES) {\n    extensionArgs[type] = {\n      [EXT_SUBCOMMAND_LIST]: makeListArgs(type),\n      [EXT_SUBCOMMAND_INSTALL]: makeInstallArgs(type),\n      [EXT_SUBCOMMAND_UNINSTALL]: makeUninstallArgs(type),\n      [EXT_SUBCOMMAND_UPDATE]: makeUpdateArgs(type),\n      [EXT_SUBCOMMAND_RUN]: makeRunArgs(type),\n    };\n  }\n  return /** @type {Record<ExtensionType, Record<import('appium/types').CliExtensionSubcommand,ArgumentDefinitions>>} */ (\n    extensionArgs\n  );\n});\n\n/**\n * Makes the opts for the `list` subcommand for each extension type.\n * @param {ExtensionType} type\n * @returns {ArgumentDefinitions}\n */\nfunction makeListArgs(type) {\n  return new Map([\n    ...globalExtensionArgs,\n    [\n      ['--installed'],\n      {\n        required: false,\n        default: false,\n        action: 'store_true',\n        help: `List only installed ${type}s`,\n        dest: 'showInstalled',\n      },\n    ],\n    [\n      ['--updates'],\n      {\n        required: false,\n        default: false,\n        action: 'store_true',\n        help: 'Show information about newer versions',\n        dest: 'showUpdates',\n      },\n    ],\n  ]);\n}\n\n/**\n * Makes the opts for the `install` subcommand for each extension type\n * @param {ExtensionType} type\n * @returns {ArgumentDefinitions}\n */\nfunction makeInstallArgs(type) {\n  return new Map([\n    ...globalExtensionArgs,\n    [\n      [type],\n      {\n        type: 'str',\n        help:\n          `Name of the ${type} to install, for example: ` + type === DRIVER_TYPE\n            ? DRIVER_EXAMPLE\n            : PLUGIN_EXAMPLE,\n      },\n    ],\n    [\n      ['--source'],\n      {\n        required: false,\n        default: null,\n        choices: INSTALL_TYPES_ARRAY,\n        help:\n          `Where to look for the ${type} if it is not one of Appium's verified ` +\n          `${type}s. Possible values: ${INSTALL_TYPES_ARRAY.join(', ')}`,\n        dest: 'installType',\n      },\n    ],\n    [\n      ['--package'],\n      {\n        required: false,\n        default: null,\n        type: 'str',\n        help:\n          `If installing from Git or GitHub, the package name, as defined in the plugin's ` +\n          `package.json file in the \"name\" field, cannot be determined automatically, and ` +\n          `should be reported here, otherwise the install will probably fail.`,\n        dest: 'packageName',\n      },\n    ],\n  ]);\n}\n\n/**\n * Makes the opts for the `uninstall` subcommand for each extension type\n * @param {ExtensionType} type\n * @returns {ArgumentDefinitions}\n */\nfunction makeUninstallArgs(type) {\n  return new Map([\n    ...globalExtensionArgs,\n    [\n      [type],\n      {\n        type: 'str',\n        help:\n          'Name of the driver to uninstall, for example: ' + type === DRIVER_TYPE\n            ? DRIVER_EXAMPLE\n            : PLUGIN_EXAMPLE,\n      },\n    ],\n  ]);\n}\n\n/**\n * Makes the opts for the `update` subcommand for each extension type\n * @param {ExtensionType} type\n * @returns {ArgumentDefinitions}\n */\nfunction makeUpdateArgs(type) {\n  return new Map([\n    ...globalExtensionArgs,\n    [\n      [type],\n      {\n        type: 'str',\n        help:\n          `Name of the ${type} to update, or the word \"installed\" to update all installed ` +\n            `${type}s. To see available updates, run \"appium ${type} list --installed --updates\". ` +\n            'For example: ' +\n            type ===\n          DRIVER_TYPE\n            ? DRIVER_EXAMPLE\n            : PLUGIN_EXAMPLE,\n      },\n    ],\n    [\n      ['--unsafe'],\n      {\n        required: false,\n        default: false,\n        action: 'store_true',\n        help:\n          `Include updates that might have a new major revision, and potentially include ` +\n          `breaking changes`,\n      },\n    ],\n  ]);\n}\n\n/**\n * Makes the opts for the `run` subcommand for each extension type\n * @param {ExtensionType} type\n * @returns {ArgumentDefinitions}\n */\nfunction makeRunArgs(type) {\n  return new Map([\n    ...globalExtensionArgs,\n    [\n      [type],\n      {\n        type: 'str',\n        help:\n          `Name of the ${type} to run a script from, for example: ` + type === DRIVER_TYPE\n            ? DRIVER_EXAMPLE\n            : PLUGIN_EXAMPLE,\n      },\n    ],\n    [\n      ['scriptName'],\n      {\n        default: null,\n        type: 'str',\n        help:\n          `Name of the script to run from the ${type}. The script name must be a key ` +\n          `inside the \"appium.scripts\" field inside the ${type}'s \"package.json\" file`,\n      },\n    ],\n  ]);\n}\n\n/**\n * Derives the options for the `server` command from the schema, and adds the arguments\n * which are disallowed in the config file.\n * @returns {ArgumentDefinitions}\n */\nfunction getServerArgs() {\n  return new Map([...toParserArgs(), ...serverArgsDisallowedInConfig]);\n}\n\n/**\n * These don't make sense in the context of a config file for obvious reasons.\n * @type {ArgumentDefinitions}\n */\nconst serverArgsDisallowedInConfig = new Map([\n  [\n    ['--shell'],\n    {\n      required: false,\n      help: 'Enter REPL mode',\n      action: 'store_const',\n      const: true,\n      dest: 'shell',\n    },\n  ],\n  [\n    ['--show-build-info'],\n    {\n      dest: 'showBuildInfo',\n      action: 'store_const',\n      const: true,\n      required: false,\n      help: 'Show info about the Appium build and exit',\n    },\n  ],\n  [\n    ['--show-config'],\n    {\n      dest: 'showConfig',\n      action: 'store_const',\n      const: true,\n      required: false,\n      help: 'Show the current Appium configuration and exit',\n    },\n  ],\n  [\n    ['--config'],\n    {\n      dest: 'configFile',\n      type: 'string',\n      required: false,\n      help: 'Explicit path to Appium configuration file',\n    },\n  ],\n]);\n\nexport {getServerArgs, getExtensionArgs};\n\n/**\n * @typedef {import('@appium/types').ExtensionType} ExtensionType\n */\n\n/**\n * A tuple of argument aliases and argument options\n * @typedef {Map<string[],import('argparse').ArgumentOptions>} ArgumentDefinitions\n */\n"],"mappings":"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"}