"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DriverConfig = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

var _extensionConfig = require("./extension-config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DriverConfig extends _extensionConfig.ExtensionConfig {
  knownAutomationNames;
  static _instances = new WeakMap();

  constructor(manifest) {
    super(_constants.DRIVER_TYPE, manifest);
    this.knownAutomationNames = new Set();
  }

  static create(manifest) {
    const instance = new DriverConfig(manifest);

    if (DriverConfig.getInstance(manifest)) {
      throw new Error(`Manifest with APPIUM_HOME ${manifest.appiumHome} already has a DriverConfig; use DriverConfig.getInstance() to retrieve it.`);
    }

    DriverConfig._instances.set(manifest, instance);

    return instance;
  }

  static getInstance(manifest) {
    return DriverConfig._instances.get(manifest);
  }

  async validate() {
    this.knownAutomationNames.clear();
    return await super._validate(this.manifest.getExtensionData(_constants.DRIVER_TYPE));
  }

  getConfigProblems(extData) {
    const problems = [];
    const {
      platformNames,
      automationName
    } = extData;

    if (!_lodash.default.isArray(platformNames)) {
      problems.push({
        err: 'Missing or incorrect supported platformNames list.',
        val: platformNames
      });
    } else {
      if (_lodash.default.isEmpty(platformNames)) {
        problems.push({
          err: 'Empty platformNames list.',
          val: platformNames
        });
      } else {
        for (const pName of platformNames) {
          if (!_lodash.default.isString(pName)) {
            problems.push({
              err: 'Incorrectly formatted platformName.',
              val: pName
            });
          }
        }
      }
    }

    if (!_lodash.default.isString(automationName)) {
      problems.push({
        err: 'Missing or incorrect automationName',
        val: automationName
      });
    }

    if (this.knownAutomationNames.has(automationName)) {
      problems.push({
        err: 'Multiple drivers claim support for the same automationName',
        val: automationName
      });
    }

    this.knownAutomationNames.add(automationName);
    return problems;
  }

  extensionDesc(driverName, {
    version,
    automationName
  }) {
    return `${driverName}@${version} (automationName '${automationName}')`;
  }

  findMatchingDriver({
    automationName,
    platformName
  }) {
    if (!_lodash.default.isString(platformName)) {
      throw new Error('You must include a platformName capability');
    }

    if (!_lodash.default.isString(automationName)) {
      throw new Error('You must include an automationName capability');
    }

    _logger.default.info(`Attempting to find matching driver for automationName ` + `'${automationName}' and platformName '${platformName}'`);

    try {
      const {
        driverName,
        mainClass,
        version
      } = this._getDriverBySupport(automationName, platformName);

      _logger.default.info(`The '${driverName}' driver was installed and matched caps.`);

      _logger.default.info(`Will require it at ${this.getInstallPath(driverName)}`);

      const driver = this.require(driverName);

      if (!driver) {
        throw new Error(`Driver '${driverName}' did not export a class with name '${mainClass}'. Contact the author of the driver!`);
      }

      return {
        driver,
        version,
        driverName
      };
    } catch (err) {
      const msg = `Could not find a driver for automationName ` + `'${automationName}' and platformName ${platformName}'. ` + `Have you installed a driver that supports those ` + `capabilities? Run 'appium driver list --installed' to see. ` + `(Lower-level error: ${err.message})`;
      throw new Error(msg);
    }
  }

  _getDriverBySupport(matchAutomationName, matchPlatformName) {
    const drivers = this.installedExtensions;

    for (const [driverName, driverData] of _lodash.default.toPairs(drivers)) {
      const {
        automationName,
        platformNames
      } = driverData;
      const aNameMatches = automationName.toLowerCase() === matchAutomationName.toLowerCase();

      const pNameMatches = _lodash.default.includes(platformNames.map(_lodash.default.toLower), matchPlatformName.toLowerCase());

      if (aNameMatches && pNameMatches) {
        return {
          driverName,
          ...driverData
        };
      }

      if (aNameMatches) {
        throw new Error(`Driver '${driverName}' supports automationName ` + `'${automationName}', but Appium could not find ` + `support for platformName '${matchPlatformName}'. Supported ` + `platformNames are: ` + JSON.stringify(platformNames));
      }
    }

    throw new Error(`Could not find installed driver to support given caps`);
  }

}

exports.DriverConfig = DriverConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,