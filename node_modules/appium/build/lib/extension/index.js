"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getActiveDrivers = getActiveDrivers;
exports.getActivePlugins = getActivePlugins;
exports.loadExtensions = loadExtensions;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

var _driverConfig = require("./driver-config");

var _manifest = require("./manifest");

var _pluginConfig = require("./plugin-config");

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function loadExtensions(appiumHome) {
  const manifest = _manifest.Manifest.getInstance(appiumHome);

  await manifest.read();

  const driverConfig = _driverConfig.DriverConfig.getInstance(manifest) ?? _driverConfig.DriverConfig.create(manifest);

  const pluginConfig = _pluginConfig.PluginConfig.getInstance(manifest) ?? _pluginConfig.PluginConfig.create(manifest);

  await _bluebird.default.all([driverConfig.validate(), pluginConfig.validate()]);
  return {
    driverConfig,
    pluginConfig
  };
}

function getActivePlugins(pluginConfig, usePlugins = []) {
  return new Map(_lodash.default.compact(Object.keys(pluginConfig.installedExtensions).filter(pluginName => _lodash.default.includes(usePlugins, pluginName) || usePlugins.length === 1 && usePlugins[0] === _constants.USE_ALL_PLUGINS).map(pluginName => {
    try {
      _logger.default.info(`Attempting to load plugin ${pluginName}...`);

      const PluginClass = pluginConfig.require(pluginName);

      return [PluginClass, pluginName];
    } catch (err) {
      _logger.default.error(`Could not load plugin '${pluginName}', so it will not be available. Error ` + `in loading the plugin was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  })));
}

function getActiveDrivers(driverConfig, useDrivers = []) {
  return new Map(_lodash.default.compact(Object.keys(driverConfig.installedExtensions).filter(driverName => _lodash.default.includes(useDrivers, driverName) || useDrivers.length === 0).map(driverName => {
    try {
      _logger.default.info(`Attempting to load driver ${driverName}...`);

      const DriverClass = driverConfig.require(driverName);

      return [DriverClass, driverName];
    } catch (err) {
      _logger.default.error(`Could not load driver '${driverName}', so it will not be available. Error ` + `in loading the driver was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,