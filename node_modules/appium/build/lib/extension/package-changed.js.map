{"version":3,"file":"package-changed.js","names":["packageDidChange","appiumHome","hashFilename","path","join","PKG_HASHFILE_RELATIVE_PATH","isChanged","writeHash","hash","oldHash","hashFilenameDir","dirname","log","debug","fs","mkdirp","err","Error","message","isPackageChanged","cwd"],"sources":["../../../lib/extension/package-changed.js"],"sourcesContent":["import {fs} from '@appium/support';\nimport {isPackageChanged} from 'package-changed';\nimport path from 'path';\nimport {PKG_HASHFILE_RELATIVE_PATH} from '../constants';\nimport log from '../logger';\n\n/**\n * Determines if extensions have changed, and updates a hash the `package.json` in `appiumHome` if so.\n *\n * If they have, we need to sync them with the `extensions.yaml` manifest.\n *\n * _Warning: this makes a blocking call to `writeFileSync`._\n * @param {string} appiumHome\n * @returns {Promise<boolean>} `true` if `package.json` `appiumHome` changed\n */\nexport async function packageDidChange(appiumHome) {\n  const hashFilename = path.join(appiumHome, PKG_HASHFILE_RELATIVE_PATH);\n\n  // XXX: the types in `package-changed` seem to be wrong.\n\n  /** @type {boolean} */\n  let isChanged;\n  /** @type {() => void} */\n  let writeHash;\n  /** @type {string} */\n  let hash;\n  /** @type {string|undefined} */\n  let oldHash;\n\n  // first mkdirp the target dir.\n  const hashFilenameDir = path.dirname(hashFilename);\n  log.debug(`Creating hash file directory: ${hashFilenameDir}`);\n  try {\n    await fs.mkdirp(hashFilenameDir);\n  } catch (err) {\n    throw new Error(\n      `Appium could not create the directory for hash file: ${hashFilenameDir}. Original error: ${err.message}`\n    );\n  }\n\n  try {\n    ({isChanged, writeHash, oldHash, hash} = await isPackageChanged({\n      cwd: appiumHome,\n      hashFilename: PKG_HASHFILE_RELATIVE_PATH,\n    }));\n  } catch {\n    return true;\n  }\n\n  if (isChanged) {\n    try {\n      writeHash();\n      log.debug(\n        `Updated hash of ${appiumHome}/package.json from: ${oldHash ?? '(none)'} to: ${hash}`\n      );\n    } catch (err) {\n      throw new Error(\n        `Appium could not write hash file: ${hashFilenameDir}. Original error: ${err.message}`\n      );\n    }\n  }\n\n  return isChanged;\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAWO,eAAeA,gBAAf,CAAgCC,UAAhC,EAA4C;EACjD,MAAMC,YAAY,GAAGC,aAAA,CAAKC,IAAL,CAAUH,UAAV,EAAsBI,qCAAtB,CAArB;;EAKA,IAAIC,SAAJ;EAEA,IAAIC,SAAJ;EAEA,IAAIC,IAAJ;EAEA,IAAIC,OAAJ;;EAGA,MAAMC,eAAe,GAAGP,aAAA,CAAKQ,OAAL,CAAaT,YAAb,CAAxB;;EACAU,eAAA,CAAIC,KAAJ,CAAW,iCAAgCH,eAAgB,EAA3D;;EACA,IAAI;IACF,MAAMI,WAAA,CAAGC,MAAH,CAAUL,eAAV,CAAN;EACD,CAFD,CAEE,OAAOM,GAAP,EAAY;IACZ,MAAM,IAAIC,KAAJ,CACH,wDAAuDP,eAAgB,qBAAoBM,GAAG,CAACE,OAAQ,EADpG,CAAN;EAGD;;EAED,IAAI;IACF,CAAC;MAACZ,SAAD;MAAYC,SAAZ;MAAuBE,OAAvB;MAAgCD;IAAhC,IAAwC,MAAM,IAAAW,gCAAA,EAAiB;MAC9DC,GAAG,EAAEnB,UADyD;MAE9DC,YAAY,EAAEG;IAFgD,CAAjB,CAA/C;EAID,CALD,CAKE,MAAM;IACN,OAAO,IAAP;EACD;;EAED,IAAIC,SAAJ,EAAe;IACb,IAAI;MACFC,SAAS;;MACTK,eAAA,CAAIC,KAAJ,CACG,mBAAkBZ,UAAW,uBAAsBQ,OAAO,IAAI,QAAS,QAAOD,IAAK,EADtF;IAGD,CALD,CAKE,OAAOQ,GAAP,EAAY;MACZ,MAAM,IAAIC,KAAJ,CACH,qCAAoCP,eAAgB,qBAAoBM,GAAG,CAACE,OAAQ,EADjF,CAAN;IAGD;EACF;;EAED,OAAOZ,SAAP;AACD"}