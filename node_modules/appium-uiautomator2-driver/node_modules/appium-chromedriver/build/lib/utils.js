"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.X86 = exports.X64 = exports.OS = exports.M1_ARCH_SUFFIX = exports.CHROMEDRIVER_CHROME_MAPPING = exports.CD_VER = exports.CD_CDN = exports.CD_BASE_DIR = void 0;
exports.generateLogPrefix = generateLogPrefix;
exports.getChromeVersion = getChromeVersion;
exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.getChromedriverDir = getChromedriverDir;
exports.getMostRecentChromedriver = getMostRecentChromedriver;
exports.getOsName = exports.getOsInfo = void 0;
exports.retrieveData = retrieveData;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
var _driver = require("appium/driver");
var _path = _interopRequireDefault(require("path"));
var _compareVersions = require("compare-versions");
var _axios = _interopRequireDefault(require("axios"));
var _teen_process = require("teen_process");
const CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
exports.CD_CDN = CD_CDN;
const OS = {
  linux: 'linux',
  windows: 'win',
  mac: 'mac'
};
exports.OS = OS;
const X64 = '64';
exports.X64 = X64;
const X86 = '32';
exports.X86 = X86;
const M1_ARCH_SUFFIX = '_m1';
exports.M1_ARCH_SUFFIX = M1_ARCH_SUFFIX;
const CD_EXECUTABLE_PREFIX = 'chromedriver';
const MODULE_NAME = 'appium-chromedriver';

const getModuleRoot = _lodash.default.memoize(function getModuleRoot() {
  if (!_lodash.default.isFunction(_support.node.getModuleRootSync)) {
    const {
      existsSync,
      readFileSync
    } = require('fs');
    let currentDir = _path.default.dirname(_path.default.resolve(__filename));
    let isAtFsRoot = false;
    while (!isAtFsRoot) {
      const manifestPath = _path.default.join(currentDir, 'package.json');
      try {
        if (existsSync(manifestPath) && JSON.parse(readFileSync(manifestPath, 'utf8')).name === MODULE_NAME) {
          return currentDir;
        }
      } catch (ign) {}
      currentDir = _path.default.dirname(currentDir);
      isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
    }
    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
  }
  const root = _support.node.getModuleRootSync(MODULE_NAME, __filename);
  if (!root) {
    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
  }
  return root;
});

const CHROMEDRIVER_CHROME_MAPPING = require(_path.default.join(getModuleRoot(), 'config', 'mapping.json'));
exports.CHROMEDRIVER_CHROME_MAPPING = CHROMEDRIVER_CHROME_MAPPING;
const CD_BASE_DIR = _path.default.join(getModuleRoot(), 'chromedriver');
exports.CD_BASE_DIR = CD_BASE_DIR;
function getMostRecentChromedriver(mapping = CHROMEDRIVER_CHROME_MAPPING) {
  if (_lodash.default.isEmpty(mapping)) {
    throw new Error('Unable to get most recent Chromedriver version from empty mapping');
  }
  return _lodash.default.last(_lodash.default.keys(mapping).sort(_compareVersions.compareVersions));
}
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || getMostRecentChromedriver();
exports.CD_VER = CD_VER;
async function getChromeVersion(adb, bundleId) {
  const {
    versionName
  } = await adb.getPackageInfo(bundleId);
  return versionName;
}
function getChromedriverDir(osName = getOsName()) {
  return _path.default.resolve(CD_BASE_DIR, osName);
}
async function getChromedriverBinaryPath(osName = getOsName()) {
  const rootDir = getChromedriverDir(osName);
  const pathSuffix = osName === OS.windows ? '.exe' : '';
  const paths = await _support.fs.glob(`${CD_EXECUTABLE_PREFIX}*${pathSuffix}`, {
    cwd: rootDir,
    absolute: true,
    nocase: true,
    nodir: true,
    strict: false
  });
  return _lodash.default.isEmpty(paths) ? _path.default.resolve(rootDir, `${CD_EXECUTABLE_PREFIX}${pathSuffix}`) : _lodash.default.first(paths);
}
async function retrieveData(url, headers, opts = {}) {
  const {
    timeout = 5000,
    responseType = 'text'
  } = opts;
  return (await (0, _axios.default)({
    url,
    headers,
    timeout,
    responseType
  })).data;
}
const getOsName = _lodash.default.memoize(function getOsName() {
  if (_support.system.isWindows()) {
    return OS.windows;
  }
  if (_support.system.isMac()) {
    return OS.mac;
  }
  return OS.linux;
});
exports.getOsName = getOsName;
const getOsInfo = _lodash.default.memoize(async function getOsInfo() {
  return {
    name: getOsName(),
    arch: await _support.system.arch(),
    hardwareName: _support.system.isWindows() ? null : _lodash.default.trim(await (0, _teen_process.exec)('uname', ['-m']))
  };
});
exports.getOsInfo = getOsInfo;
const getBaseDriverInstance = _lodash.default.memoize(() => new _driver.BaseDriver({}, false));

function generateLogPrefix(obj, sessionId = null) {
  return getBaseDriverInstance().helpers.generateDriverLogPrefix(obj, sessionId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,