"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doInstall = doInstall;
exports.install = install;
require("source-map-support/register");
var _support = require("appium/support");
var _storageClient = _interopRequireDefault(require("./storage-client"));
var _utils = require("./utils");
const DOWNLOAD_TIMEOUT_MS = 15 * 1000;
const LATEST_VERSION = 'LATEST';
async function formatCdVersion(ver) {
  return ver === LATEST_VERSION ? (await (0, _utils.retrieveData)(`${_utils.CD_CDN}/LATEST_RELEASE`, {
    'user-agent': 'appium',
    accept: '*/*'
  }, {
    timeout: DOWNLOAD_TIMEOUT_MS
  })).trim() : ver;
}
async function prepareChromedriverDir(platformName) {
  const chromedriverDir = (0, _utils.getChromedriverDir)(platformName);
  if (!(await _support.fs.exists(chromedriverDir))) {
    await (0, _support.mkdirp)(chromedriverDir);
  }
  return chromedriverDir;
}
async function install() {
  const osInfo = await (0, _utils.getOsInfo)();
  const client = new _storageClient.default({
    chromedriverDir: await prepareChromedriverDir(osInfo.name)
  });
  await client.syncDrivers({
    osInfo,
    versions: [await formatCdVersion(_utils.CD_VER)]
  });
}
async function doInstall() {
  await install();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJET1dOTE9BRF9USU1FT1VUX01TIiwiTEFURVNUX1ZFUlNJT04iLCJmb3JtYXRDZFZlcnNpb24iLCJ2ZXIiLCJyZXRyaWV2ZURhdGEiLCJDRF9DRE4iLCJhY2NlcHQiLCJ0aW1lb3V0IiwidHJpbSIsInByZXBhcmVDaHJvbWVkcml2ZXJEaXIiLCJwbGF0Zm9ybU5hbWUiLCJjaHJvbWVkcml2ZXJEaXIiLCJnZXRDaHJvbWVkcml2ZXJEaXIiLCJmcyIsImV4aXN0cyIsIm1rZGlycCIsImluc3RhbGwiLCJvc0luZm8iLCJnZXRPc0luZm8iLCJjbGllbnQiLCJDaHJvbWVkcml2ZXJTdG9yYWdlQ2xpZW50IiwibmFtZSIsInN5bmNEcml2ZXJzIiwidmVyc2lvbnMiLCJDRF9WRVIiLCJkb0luc3RhbGwiXSwic291cmNlcyI6WyIuLi8uLi9saWIvaW5zdGFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcywgbWtkaXJwIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IENocm9tZWRyaXZlclN0b3JhZ2VDbGllbnQgZnJvbSAnLi9zdG9yYWdlLWNsaWVudCc7XG5pbXBvcnQge1xuICBDRF9DRE4sIENEX1ZFUiwgcmV0cmlldmVEYXRhLCBnZXRPc0luZm8sIGdldENocm9tZWRyaXZlckRpcixcbn0gZnJvbSAnLi91dGlscyc7XG5cblxuY29uc3QgRE9XTkxPQURfVElNRU9VVF9NUyA9IDE1ICogMTAwMDtcbmNvbnN0IExBVEVTVF9WRVJTSU9OID0gJ0xBVEVTVCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGZvcm1hdENkVmVyc2lvbiAodmVyKSB7XG4gIHJldHVybiB2ZXIgPT09IExBVEVTVF9WRVJTSU9OXG4gICAgPyAoYXdhaXQgcmV0cmlldmVEYXRhKGAke0NEX0NETn0vTEFURVNUX1JFTEVBU0VgLCB7XG4gICAgICAndXNlci1hZ2VudCc6ICdhcHBpdW0nLFxuICAgICAgYWNjZXB0OiAnKi8qJyxcbiAgICB9LCB7IHRpbWVvdXQ6IERPV05MT0FEX1RJTUVPVVRfTVMgfSkpLnRyaW0oKVxuICAgIDogdmVyO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlQ2hyb21lZHJpdmVyRGlyIChwbGF0Zm9ybU5hbWUpIHtcbiAgY29uc3QgY2hyb21lZHJpdmVyRGlyID0gZ2V0Q2hyb21lZHJpdmVyRGlyKHBsYXRmb3JtTmFtZSk7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKGNocm9tZWRyaXZlckRpcikpIHtcbiAgICBhd2FpdCBta2RpcnAoY2hyb21lZHJpdmVyRGlyKTtcbiAgfVxuICByZXR1cm4gY2hyb21lZHJpdmVyRGlyO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbnN0YWxsICgpIHtcbiAgY29uc3Qgb3NJbmZvID0gYXdhaXQgZ2V0T3NJbmZvKCk7XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBDaHJvbWVkcml2ZXJTdG9yYWdlQ2xpZW50KHtcbiAgICBjaHJvbWVkcml2ZXJEaXI6IGF3YWl0IHByZXBhcmVDaHJvbWVkcml2ZXJEaXIob3NJbmZvLm5hbWUpLFxuICB9KTtcbiAgYXdhaXQgY2xpZW50LnN5bmNEcml2ZXJzKHtcbiAgICBvc0luZm8sXG4gICAgdmVyc2lvbnM6IFthd2FpdCBmb3JtYXRDZFZlcnNpb24oQ0RfVkVSKV0sXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkb0luc3RhbGwgKCkge1xuICBhd2FpdCBpbnN0YWxsKCk7XG59XG5cbmV4cG9ydCB7IGluc3RhbGwsIGRvSW5zdGFsbCB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFLQSxNQUFNQSxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsSUFBSTtBQUNyQyxNQUFNQyxjQUFjLEdBQUcsUUFBUTtBQUUvQixlQUFlQyxlQUFlLENBQUVDLEdBQUcsRUFBRTtFQUNuQyxPQUFPQSxHQUFHLEtBQUtGLGNBQWMsR0FDekIsQ0FBQyxNQUFNLElBQUFHLG1CQUFZLEVBQUUsR0FBRUMsYUFBTyxpQkFBZ0IsRUFBRTtJQUNoRCxZQUFZLEVBQUUsUUFBUTtJQUN0QkMsTUFBTSxFQUFFO0VBQ1YsQ0FBQyxFQUFFO0lBQUVDLE9BQU8sRUFBRVA7RUFBb0IsQ0FBQyxDQUFDLEVBQUVRLElBQUksRUFBRSxHQUMxQ0wsR0FBRztBQUNUO0FBRUEsZUFBZU0sc0JBQXNCLENBQUVDLFlBQVksRUFBRTtFQUNuRCxNQUFNQyxlQUFlLEdBQUcsSUFBQUMseUJBQWtCLEVBQUNGLFlBQVksQ0FBQztFQUN4RCxJQUFJLEVBQUMsTUFBTUcsV0FBRSxDQUFDQyxNQUFNLENBQUNILGVBQWUsQ0FBQyxHQUFFO0lBQ3JDLE1BQU0sSUFBQUksZUFBTSxFQUFDSixlQUFlLENBQUM7RUFDL0I7RUFDQSxPQUFPQSxlQUFlO0FBQ3hCO0FBRUEsZUFBZUssT0FBTyxHQUFJO0VBQ3hCLE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUFDLGdCQUFTLEdBQUU7RUFDaEMsTUFBTUMsTUFBTSxHQUFHLElBQUlDLHNCQUF5QixDQUFDO0lBQzNDVCxlQUFlLEVBQUUsTUFBTUYsc0JBQXNCLENBQUNRLE1BQU0sQ0FBQ0ksSUFBSTtFQUMzRCxDQUFDLENBQUM7RUFDRixNQUFNRixNQUFNLENBQUNHLFdBQVcsQ0FBQztJQUN2QkwsTUFBTTtJQUNOTSxRQUFRLEVBQUUsQ0FBQyxNQUFNckIsZUFBZSxDQUFDc0IsYUFBTSxDQUFDO0VBQzFDLENBQUMsQ0FBQztBQUNKO0FBRUEsZUFBZUMsU0FBUyxHQUFJO0VBQzFCLE1BQU1ULE9BQU8sRUFBRTtBQUNqQiJ9