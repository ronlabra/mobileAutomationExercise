"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidDriver = void 0;
require("source-map-support/register");
var _driver = require("appium/driver");
var _desiredCaps = _interopRequireDefault(require("./desired-caps"));
var _index = _interopRequireDefault(require("./commands/index"));
var _androidHelpers = require("./android-helpers");
var _lodash = _interopRequireDefault(require("lodash"));
var _appiumAdb = require("appium-adb");
var _support = require("appium/support");
var _asyncbox = require("asyncbox");
var _sharedPreferencesBuilder = require("shared-preferences-builder");
var _bluebird = _interopRequireDefault(require("bluebird"));
const APP_EXTENSION = '.apk';
const DEVICE_PORT = 4724;

const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/network_connection')]];
class AndroidDriver extends _driver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.sessionChromedrivers = {};
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash.default.clone(NO_PROXY);
    this.settings = new _driver.DeviceSettings({
      ignoreUnimportantViews: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.apkStrings = {};
    this.unlocker = _androidHelpers.helpers.unlocker;
    for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      AndroidDriver.prototype[cmd] = fn;
    }

    this.curContext = this.defaultContextName();
  }
  async createSession(...args) {
    try {
      let [sessionId, caps] = await super.createSession(...args);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: true,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: true,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);

      let defaultOpts = {
        action: 'android.intent.action.MAIN',
        category: 'android.intent.category.LAUNCHER',
        flags: '0x10200000',
        disableAndroidWatchers: false,
        tmpDir: await _support.tempDir.staticDir(),
        fullReset: false,
        autoLaunch: true,
        adbPort: _appiumAdb.DEFAULT_ADB_PORT,
        bootstrapPort: DEVICE_PORT,
        androidInstallTimeout: 90000
      };
      _lodash.default.defaults(this.opts, defaultOpts);
      this.useUnlockHelperApp = _lodash.default.isUndefined(this.caps.unlockType);

      if (this.opts.noReset === true) {
        this.opts.fullReset = false;
      }
      if (this.opts.fullReset === true) {
        this.opts.noReset = false;
      }
      this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
      this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;
      if (this.isChromeSession) {
        _androidHelpers.helpers.adjustBrowserSessionCaps(this.opts);
      }
      if (this.opts.nativeWebScreenshot) {
        this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
      }
      if (this.opts.reboot) {
        this.setAvdFromCapabilities(caps);
      }

      let {
        udid,
        emPort
      } = await _androidHelpers.helpers.getDeviceInfoFromCaps(this.opts);
      this.opts.udid = udid;
      this.opts.emPort = emPort;

      this.adb = await _androidHelpers.helpers.createADB({
        udid: this.opts.udid,
        emPort: this.opts.emPort,
        adbPort: this.opts.adbPort,
        suppressKillServer: this.opts.suppressKillServer,
        remoteAdbHost: this.opts.remoteAdbHost,
        clearDeviceLogsOnStart: this.opts.clearDeviceLogsOnStart,
        adbExecTimeout: this.opts.adbExecTimeout,
        allowOfflineDevices: this.opts.allowOfflineDevices
      });
      if ((await this.adb.getApiLevel()) >= 23) {
        this.log.warn("Consider setting 'automationName' capability to " + "'uiautomator2' on Android >= 6, since UIAutomator framework " + 'is not maintained anymore by the OS vendor.');
      }
      if (this.helpers.isPackageOrBundle(this.opts.app)) {
        this.opts.appPackage = this.opts.app;
        this.opts.app = null;
      }
      if (this.opts.app) {
        this.opts.app = await this.helpers.configureApp(this.opts.app, APP_EXTENSION);
        await this.checkAppPresent();
      } else if (this.appOnDevice) {
        this.log.info(`App file was not listed, instead we're going to run ` + `${this.opts.appPackage} directly on the device`);
        await this.checkPackagePresent();
      }

      if (_support.util.hasValue(this.opts.networkSpeed)) {
        if (!this.isEmulator()) {
          this.log.warn('Sorry, networkSpeed capability is only available for emulators');
        } else {
          const networkSpeed = (0, _androidHelpers.ensureNetworkSpeed)(this.adb, this.opts.networkSpeed);
          await this.adb.networkSpeed(networkSpeed);
        }
      }
      if (_support.util.hasValue(this.opts.gpsEnabled)) {
        if (this.isEmulator()) {
          this.log.info(`Trying to ${this.opts.gpsEnabled ? 'enable' : 'disable'} gps location provider`);
          await this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled);
        } else {
          this.log.warn('Sorry! gpsEnabled capability is only available for emulators');
        }
      }
      await this.startAndroidSession(this.opts);
      return [sessionId, this.caps];
    } catch (e) {
      try {
        await this.deleteSession();
      } catch (ign) {}
      throw e;
    }
  }
  isEmulator() {
    return _androidHelpers.helpers.isEmulator(this.adb, this.opts);
  }
  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      this.log.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        this.log.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }
      if (!caps.platformVersion) {
        this.log.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }
      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }
  get appOnDevice() {
    return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
  }
  get isChromeSession() {
    return _androidHelpers.helpers.isChromeBrowser(this.opts.browserName);
  }
  async onSettingsUpdate(key, value) {
    if (key === 'ignoreUnimportantViews') {
      await this.setCompressedLayoutHierarchy(value);
    }
  }
  async startAndroidSession() {
    this.log.info(`Starting Android session`);
    this.defaultIME = await _androidHelpers.helpers.initDevice(this.adb, this.opts);

    this.caps.deviceName = this.adb.curDeviceId;
    this.caps.deviceUDID = this.opts.udid;
    this.caps.platformVersion = await this.adb.getPlatformVersion();
    this.caps.deviceScreenSize = await this.adb.getScreenSize();
    this.caps.deviceModel = await this.adb.getModel();
    this.caps.deviceManufacturer = await this.adb.getManufacturer();
    if (this.opts.disableWindowAnimation) {
      if (await this.adb.isAnimationOn()) {
        if ((await this.adb.getApiLevel()) >= 28) {
          this.log.warn('Relaxing hidden api policy to manage animation scale');
          await this.adb.setHiddenApiPolicy('1', !!this.opts.ignoreHiddenApiPolicyError);
        }
        this.log.info('Disabling window animation as it is requested by "disableWindowAnimation" capability');
        await this.adb.setAnimationState(false);
        this._wasWindowAnimationDisabled = true;
      } else {
        this.log.info('Window animation is already disabled');
      }
    }

    await this.initAUT();

    this.bootstrap = new _androidHelpers.helpers.bootstrap(this.adb, this.opts.bootstrapPort, this.opts.websocket);
    await this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts);
    (async () => {
      try {
        await this.bootstrap.onUnexpectedShutdown;
      } catch (err) {
        if (!this.bootstrap.ignoreUnexpectedShutdown) {
          await this.startUnexpectedShutdown(err);
        }
      }
    })();
    if (!this.opts.skipUnlock) {
      await _androidHelpers.helpers.unlock(this, this.adb, this.caps);
    }

    if (this.opts.ignoreUnimportantViews) {
      await this.settings.update({
        ignoreUnimportantViews: this.opts.ignoreUnimportantViews
      });
    }
    if (this.isChromeSession) {
      await this.startChromeSession();
    } else {
      if (this.opts.autoLaunch) {
        await this.startAUT();
      }
    }
    if (_support.util.hasValue(this.opts.orientation)) {
      this.log.debug(`Setting initial orientation to '${this.opts.orientation}'`);
      await this.setOrientation(this.opts.orientation);
    }
    await this.initAutoWebview();
  }
  async initAutoWebview() {
    if (this.opts.autoWebview) {
      let viewName = this.defaultWebviewName();
      let timeout = this.opts.autoWebviewTimeout || 2000;
      this.log.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

      await (0, _asyncbox.retryInterval)(timeout / 500, 500, async () => {
        await this.setContext(viewName);
      });
    }
  }
  async initAUT() {
    let launchInfo = await _androidHelpers.helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, launchInfo);
    Object.assign(this.caps, launchInfo);

    if (this.opts.uninstallOtherPackages) {
      _androidHelpers.helpers.validateDesiredCaps(this.opts);
      await _androidHelpers.helpers.uninstallOtherPackages(this.adb, _androidHelpers.helpers.parseArray(this.opts.uninstallOtherPackages), [_androidHelpers.SETTINGS_HELPER_PKG_ID]);
    }

    if (this.opts.otherApps) {
      let otherApps;
      try {
        otherApps = _androidHelpers.helpers.parseArray(this.opts.otherApps);
      } catch (e) {
        this.log.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
      }
      otherApps = await _bluebird.default.all(otherApps.map(app => this.helpers.configureApp(app, APP_EXTENSION)));
      await _androidHelpers.helpers.installOtherApks(otherApps, this.adb, this.opts);
    }

    if (!this.opts.app) {
      if (this.opts.fullReset) {
        this.log.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
      }
      this.log.debug('No app capability. Assuming it is already on the device');
      if (this.opts.fastReset) {
        await _androidHelpers.helpers.resetApp(this.adb, this.opts);
      }
      return;
    }
    if (!this.opts.skipUninstall) {
      await this.adb.uninstallApk(this.opts.appPackage);
    }
    await _androidHelpers.helpers.installApk(this.adb, this.opts);
    const apkStringsForLanguage = await _androidHelpers.helpers.pushStrings(this.opts.language, this.adb, this.opts);
    if (this.opts.language) {
      this.apkStrings[this.opts.language] = apkStringsForLanguage;
    }

    if (!_lodash.default.isUndefined(this.opts.sharedPreferences)) {
      await this.setSharedPreferences(this.opts);
    }
  }
  async checkAppPresent() {
    this.log.debug('Checking whether app is actually present');
    if (!(await _support.fs.exists(this.opts.app))) {
      this.log.errorAndThrow(`Could not find app apk at ${this.opts.app}`);
    }
  }
  async checkPackagePresent() {
    this.log.debug('Checking whether package is present on the device');
    if (!(await this.adb.shell(['pm', 'list', 'packages', this.opts.appPackage]))) {
      this.log.errorAndThrow(`Could not find package ${this.opts.appPackage} on the device`);
    }
  }

  async setCompressedLayoutHierarchy(compress) {
    await this.bootstrap.sendAction('compressedLayoutHierarchy', {
      compressLayout: compress
    });
  }
  async deleteSession() {
    var _this$adb5;
    this.log.debug('Shutting down Android driver');
    try {
      if (!_lodash.default.isEmpty(this._screenRecordingProperties)) {
        await this.stopRecordingScreen();
      }
    } catch (ign) {}
    await _androidHelpers.helpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId);
    await this.mobileStopScreenStreaming();
    await super.deleteSession();
    if (this.bootstrap) {
      var _this$adb3;
      await this.stopChromedriverProxies();
      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        var _this$adb;
        this.log.debug(`Resetting IME to ${this.defaultIME}`);
        await ((_this$adb = this.adb) === null || _this$adb === void 0 ? void 0 : _this$adb.setIME(this.defaultIME));
      }
      if (!this.isChromeSession && !this.opts.dontStopAppOnReset) {
        var _this$adb2;
        await ((_this$adb2 = this.adb) === null || _this$adb2 === void 0 ? void 0 : _this$adb2.forceStop(this.opts.appPackage));
      }
      await ((_this$adb3 = this.adb) === null || _this$adb3 === void 0 ? void 0 : _this$adb3.goToHome());
      if (this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice) {
        var _this$adb4;
        await ((_this$adb4 = this.adb) === null || _this$adb4 === void 0 ? void 0 : _this$adb4.uninstallApk(this.opts.appPackage));
      }
      await this.bootstrap.shutdown();
      this.bootstrap = null;
    } else {
      this.log.debug("Called deleteSession but bootstrap wasn't active");
    }
    await ((_this$adb5 = this.adb) === null || _this$adb5 === void 0 ? void 0 : _this$adb5.stopLogcat());
    if (this.useUnlockHelperApp) {
      var _this$adb6;
      await ((_this$adb6 = this.adb) === null || _this$adb6 === void 0 ? void 0 : _this$adb6.forceStop('io.appium.unlock'));
    }
    if (this._wasWindowAnimationDisabled) {
      var _this$adb7, _this$adb8;
      this.log.info('Restoring window animation state');
      await ((_this$adb7 = this.adb) === null || _this$adb7 === void 0 ? void 0 : _this$adb7.setAnimationState(true));

      if ((await ((_this$adb8 = this.adb) === null || _this$adb8 === void 0 ? void 0 : _this$adb8.getApiLevel())) >= 28) {
        var _this$adb9;
        this.log.info('Restoring hidden api policy to the device default configuration');
        await ((_this$adb9 = this.adb) === null || _this$adb9 === void 0 ? void 0 : _this$adb9.setDefaultHiddenApiPolicy(!!this.opts.ignoreHiddenApiPolicyError));
      }
    }
    if (this.opts.reboot) {
      var _this$adb10;
      let avdName = this.opts.avd.replace('@', '');
      this.log.debug(`closing emulator '${avdName}'`);
      await ((_this$adb10 = this.adb) === null || _this$adb10 === void 0 ? void 0 : _this$adb10.killEmulator(avdName));
    }
  }
  async setSharedPreferences() {
    let sharedPrefs = this.opts.sharedPreferences;
    this.log.info('Trying to set shared preferences');
    let name = sharedPrefs.name;
    if (_lodash.default.isUndefined(name)) {
      this.log.warn(`Skipping setting Shared preferences, name is undefined: ${JSON.stringify(sharedPrefs)}`);
      return false;
    }
    let remotePath = `/data/data/${this.opts.appPackage}/shared_prefs`;
    let remoteFile = `${remotePath}/${name}.xml`;
    let localPath = `/tmp/${name}.xml`;
    let builder = this.getPrefsBuilder();
    builder.build(sharedPrefs.prefs);
    this.log.info(`Creating temporary shared preferences: ${localPath}`);
    builder.toFile(localPath);
    this.log.info(`Creating shared_prefs remote folder: ${remotePath}`);
    await this.adb.shell(['mkdir', '-p', remotePath]);
    this.log.info(`Pushing shared_prefs to ${remoteFile}`);
    await this.adb.push(localPath, remoteFile);
    try {
      this.log.info(`Trying to remove shared preferences temporary file`);
      if (await _support.fs.exists(localPath)) {
        await _support.fs.unlink(localPath);
      }
    } catch (e) {
      this.log.warn(`Error trying to remove temporary file ${localPath}`);
    }
    return true;
  }
  getPrefsBuilder() {
    return new _sharedPreferencesBuilder.SharedPrefsBuilder();
  }
  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }
    if ((!caps.browserName || !_androidHelpers.helpers.isChromeBrowser(caps.browserName)) && !caps.app && !caps.appPackage) {
      this.log.errorAndThrow('The desired capabilities must include either an app, appPackage or browserName');
    }
    return _androidHelpers.helpers.validateDesiredCaps(caps);
  }
  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return this.jwpProxyActive;
  }
  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }
  canProxy(sessionId) {
    super.canProxy(sessionId);

    return _lodash.default.isFunction(this.proxyReqRes);
  }
}
exports.AndroidDriver = AndroidDriver;
var _default = AndroidDriver;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,