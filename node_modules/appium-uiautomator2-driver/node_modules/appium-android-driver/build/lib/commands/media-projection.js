"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _androidHelpers = require("../android-helpers");
var _moment = _interopRequireDefault(require("moment"));
const commands = {};

exports.commands = commands;
const DEFAULT_EXT = '.mp4';
const RECORDING_STARTUP_TIMEOUT_MS = 3 * 1000;
const RECORDING_STOP_TIMEOUT_MS = 3 * 1000;
const MIN_API_LEVEL = 29;
const RECORDING_SERVICE_NAME = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}/.recorder.RecorderService`;
const RECORDING_ACTIVITY_NAME = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}/io.appium.settings.Settings`;
const RECORDING_ACTION_START = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}.recording.ACTION_START`;
const RECORDING_ACTION_STOP = `${_androidHelpers.SETTINGS_HELPER_PKG_ID}.recording.ACTION_STOP`;
const RECORDINGS_ROOT = `/storage/emulated/0/Android/data/${_androidHelpers.SETTINGS_HELPER_PKG_ID}/files`;
const DEFAULT_FILENAME_FORMAT = 'YYYY-MM-DDTHH-mm-ss';
async function uploadRecordedMedia(localFile, remotePath = null, uploadOptions = {}) {
  if (_lodash.default.isEmpty(remotePath)) {
    return (await _support.util.toInMemoryBase64(localFile)).toString();
  }
  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };
  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }
  await _support.net.uploadFile(localFile, remotePath, options);
  return '';
}
function adjustMediaExtension(name) {
  return _lodash.default.toLower(name).endsWith(DEFAULT_EXT) ? name : `${name}${DEFAULT_EXT}`;
}
async function verifyMediaProjectionRecordingIsSupported(adb) {
  const apiLevel = await adb.getApiLevel();
  if (apiLevel < MIN_API_LEVEL) {
    throw new Error(`Media projection-based recording is not available on API Level ${apiLevel}. ` + `Minimum required API Level is ${MIN_API_LEVEL}.`);
  }
}
class MediaProjectionRecorder {
  constructor(adb) {
    this.adb = adb;
  }
  async isRunning() {
    const stdout = await this.adb.shell(['dumpsys', 'activity', 'services', RECORDING_SERVICE_NAME]);
    return stdout.includes(RECORDING_SERVICE_NAME);
  }
  async start(opts = {}) {
    if (await this.isRunning()) {
      return false;
    }
    await this.cleanup();
    const {
      filename,
      maxDurationSec,
      priority,
      resolution
    } = opts;
    const args = ['am', 'start', '-n', RECORDING_ACTIVITY_NAME, '-a', RECORDING_ACTION_START];
    if (filename) {
      args.push('--es', 'filename', filename);
    }
    if (maxDurationSec) {
      args.push('--es', 'max_duration_sec', `${maxDurationSec}`);
    }
    if (priority) {
      args.push('--es', 'priority', priority);
    }
    if (resolution) {
      args.push('--es', 'resolution', resolution);
    }
    await this.adb.shell(args);
    await new _bluebird.default((resolve, reject) => {
      setTimeout(async () => {
        if (!(await this.isRunning())) {
          return reject(new Error(`The media projection recording is not running after ${RECORDING_STARTUP_TIMEOUT_MS}ms. ` + `Please check the logcat output for more details.`));
        }
        resolve();
      }, RECORDING_STARTUP_TIMEOUT_MS);
    });
    return true;
  }
  async cleanup() {
    await this.adb.shell([`rm -f ${RECORDINGS_ROOT}/*`]);
  }
  async pullRecent() {
    const recordings = await this.adb.ls(RECORDINGS_ROOT, ['-tr']);
    if (_lodash.default.isEmpty(recordings)) {
      return null;
    }
    const dstPath = _path.default.join(await _support.tempDir.openDir(), recordings[0]);
    await this.adb.pull(`${RECORDINGS_ROOT}/${recordings[0]}`, dstPath);
    return dstPath;
  }
  async stop() {
    if (!(await this.isRunning())) {
      return false;
    }
    await this.adb.shell(['am', 'start', '-n', RECORDING_ACTIVITY_NAME, '-a', RECORDING_ACTION_STOP]);
    try {
      await (0, _asyncbox.waitForCondition)(async () => !(await this.isRunning()), {
        waitMs: RECORDING_STOP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (e) {
      throw new Error(`The attempt to stop the current media projection recording timed out after ` + `${RECORDING_STOP_TIMEOUT_MS}ms`);
    }
    return true;
  }
}

commands.mobileStartMediaProjectionRecording = async function mobileStartMediaProjectionRecording(options = {}) {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const {
    resolution,
    priority,
    maxDurationSec,
    filename
  } = options;
  const recorder = new MediaProjectionRecorder(this.adb);
  const fname = adjustMediaExtension(filename || (0, _moment.default)().format(DEFAULT_FILENAME_FORMAT));
  const didStart = await recorder.start({
    resolution,
    priority,
    maxDurationSec,
    filename: fname
  });
  if (didStart) {
    this.log.info(`A new media projection recording '${fname}' has been successfully started`);
  } else {
    this.log.info('Another media projection recording is already in progress. There is nothing to start');
  }
  return didStart;
};

commands.mobileIsMediaProjectionRecordingRunning = async function mobileIsMediaProjectionRecordingRunning() {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const recorder = new MediaProjectionRecorder(this.adb);
  return await recorder.isRunning();
};

commands.mobileStopMediaProjectionRecording = async function mobileStopMediaProjectionRecording(options = {}) {
  await verifyMediaProjectionRecordingIsSupported(this.adb);
  const recorder = new MediaProjectionRecorder(this.adb);
  if (await recorder.stop()) {
    this.log.info('Successfully stopped a media projection recording. Pulling the recorded media');
  } else {
    this.log.info('Media projection recording is not running. There is nothing to stop');
  }
  const recentRecordingPath = await recorder.pullRecent();
  if (!recentRecordingPath) {
    throw new Error(`No recent media projection recording have been found. Did you start any?`);
  }
  const {
    remotePath
  } = options;
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _support.fs.stat(recentRecordingPath);
    this.log.debug(`The size of the resulting media projection recording is ${_support.util.toReadableSizeString(size)}`);
  }
  try {
    return await uploadRecordedMedia(recentRecordingPath, remotePath, options);
  } finally {
    await _support.fs.rimraf(_path.default.dirname(recentRecordingPath));
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,