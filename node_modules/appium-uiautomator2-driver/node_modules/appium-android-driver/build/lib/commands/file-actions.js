"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _driver = require("appium/driver");
var _utils = require("../utils");
const CONTAINER_PATH_MARKER = '@';
const CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.+)`);
const ANDROID_MEDIA_RESCAN_INTENT = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';
const commands = {};

exports.commands = commands;
function parseContainerPath(remotePath) {
  const match = CONTAINER_PATH_PATTERN.exec(remotePath);
  if (!match) {
    throw new Error(`It is expected that package identifier is separated from the relative path with a single slash. ` + `'${remotePath}' is given instead`);
  }
  return [match[1], _path.default.posix.resolve(`/data/data/${match[1]}`, match[2])];
}

async function scanMedia(adb, remotePath, log = null) {
  log === null || log === void 0 ? void 0 : log.debug(`Performing media scan of '${remotePath}'`);
  try {
    if ((await adb.getApiLevel()) >= 29) {
      await adb.scanMedia(remotePath);
    } else {
      await adb.shell(['am', 'broadcast', '-a', ANDROID_MEDIA_RESCAN_INTENT, '-d', `file://${remotePath}`]);
    }
  } catch (e) {
    log === null || log === void 0 ? void 0 : log.warn(`Ignoring an unexpected error upon media scanning of '${remotePath}': ${e.stderr || e.message}`);
  }
}

function escapePath(p) {
  return p.replace(/'/g, `\\'`);
}

commands.pullFile = async function pullFile(remotePath) {
  if (remotePath.endsWith('/')) {
    throw new _driver.errors.InvalidArgumentError(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }
  let tmpDestination = null;
  if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
    const [packageId, pathInContainer] = parseContainerPath(remotePath);
    this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'. Will get the data from '${pathInContainer}'`);
    tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;
    try {
      await this.adb.shell(['run-as', packageId, `chmod 777 '${escapePath(pathInContainer)}'`]);
      await this.adb.shell(['run-as', packageId, `cp -f '${escapePath(pathInContainer)}' '${escapePath(tmpDestination)}'`]);
    } catch (e) {
      this.log.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
    }
  }
  const localFile = await _support.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  try {
    await this.adb.pull(tmpDestination || remotePath, localFile);
    return (await _support.util.toInMemoryBase64(localFile)).toString();
  } finally {
    if (await _support.fs.exists(localFile)) {
      await _support.fs.unlink(localFile);
    }
    if (tmpDestination) {
      await this.adb.shell(['rm', '-f', tmpDestination]);
    }
  }
};

commands.mobilePullFile = async function mobilePullFile(opts = {}) {
  const {
    remotePath
  } = (0, _utils.requireArgs)('remotePath', opts);
  return await this.pullFile(remotePath);
};

commands.pushFile = async function pushFile(remotePath, base64Data) {
  if (remotePath.endsWith('/')) {
    throw new _driver.errors.InvalidArgumentError(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }
  const localFile = await _support.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  if (_lodash.default.isArray(base64Data)) {
    base64Data = Buffer.from(base64Data).toString('utf8');
  }
  const content = Buffer.from(base64Data, 'base64');
  let tmpDestination = null;
  try {
    await _support.fs.writeFile(localFile, content.toString('binary'), 'binary');
    if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
      const [packageId, pathInContainer] = parseContainerPath(remotePath);
      this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'. ` + `Will put the data into '${pathInContainer}'`);
      tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;
      try {
        await this.adb.shell(['run-as', packageId, `mkdir -p '${escapePath(_path.default.posix.dirname(pathInContainer))}'`]);
        await this.adb.shell(['run-as', packageId, `touch '${escapePath(pathInContainer)}'`]);
        await this.adb.shell(['run-as', packageId, `chmod 777 '${escapePath(pathInContainer)}'`]);
        await this.adb.push(localFile, tmpDestination);
        await this.adb.shell(['run-as', packageId, `cp -f '${escapePath(tmpDestination)}' '${escapePath(pathInContainer)}'`]);
      } catch (e) {
        this.log.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
      }
    } else {
      await this.adb.push(localFile, remotePath);

      await scanMedia(this.adb, remotePath, this.log);
    }
  } finally {
    if (await _support.fs.exists(localFile)) {
      await _support.fs.unlink(localFile);
    }
    if (tmpDestination) {
      await this.adb.shell(['rm', '-f', tmpDestination]);
    }
  }
};

commands.mobilePushFile = async function mobilePushFile(opts = {}) {
  const {
    remotePath,
    payload
  } = (0, _utils.requireArgs)(['remotePath', 'payload'], opts);
  return await this.pushFile(remotePath, payload);
};

commands.pullFolder = async function pullFolder(remotePath) {
  const tmpRoot = await _support.tempDir.openDir();
  try {
    await this.adb.pull(remotePath, tmpRoot);
    return (await _support.zip.toInMemoryZip(tmpRoot, {
      encodeToBase64: true
    })).toString();
  } finally {
    await _support.fs.rimraf(tmpRoot);
  }
};

commands.mobilePullFolder = async function mobilePullFolder(opts = {}) {
  const {
    remotePath
  } = (0, _utils.requireArgs)('remotePath', opts);
  return await this.pullFolder(remotePath);
};

async function deleteFileOrFolder(adb, remotePath) {
  const performRemoteFsCheck = async (p, op, runAs = null) => {
    const passFlag = '__PASS__';
    const checkCmd = `[ -${op} '${escapePath(p)}' ] && echo ${passFlag}`;
    const fullCmd = runAs ? `run-as ${runAs} ${checkCmd}` : checkCmd;
    try {
      return _lodash.default.includes(await adb.shell([fullCmd]), passFlag);
    } catch (ign) {
      return false;
    }
  };
  const isFile = async (p, runAs = null) => await performRemoteFsCheck(p, 'f', runAs);
  const isDir = async (p, runAs = null) => await performRemoteFsCheck(p, 'd', runAs);
  const isPresent = async (p, runAs = null) => await performRemoteFsCheck(p, 'e', runAs);
  let dstPath = remotePath;
  let pkgId = null;
  if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
    const [packageId, pathInContainer] = parseContainerPath(remotePath);
    this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'`);
    dstPath = pathInContainer;
    pkgId = packageId;
  }
  if (pkgId) {
    try {
      await adb.shell(['run-as', pkgId, 'ls']);
    } catch (e) {
      this.log.errorAndThrow(`Cannot access the container of '${pkgId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
    }
  }
  if (!(await isPresent(dstPath, pkgId))) {
    this.log.info(`The item at '${dstPath}' does not exist. Perhaps, already deleted?`);
    return false;
  }
  const expectsFile = !remotePath.endsWith('/');
  if (expectsFile && !(await isFile(dstPath, pkgId))) {
    this.log.errorAndThrow(`The item at '${dstPath}' is not a file`);
  } else if (!expectsFile && !(await isDir(dstPath, pkgId))) {
    this.log.errorAndThrow(`The item at '${dstPath}' is not a folder`);
  }
  if (pkgId) {
    await adb.shell(['run-as', pkgId, `rm -f${expectsFile ? '' : 'r'} '${escapePath(dstPath)}'`]);
  } else {
    await adb.shell(['rm', `-f${expectsFile ? '' : 'r'}`, dstPath]);
  }
  if (await isPresent(dstPath, pkgId)) {
    this.log.errorAndThrow(`The item at '${dstPath}' still exists after being deleted. ` + `Is it writable?`);
  }
  return true;
}

commands.mobileDeleteFile = async function mobileDeleteFile(opts = {}) {
  const {
    remotePath
  } = opts;
  if (!remotePath) {
    throw new _driver.errors.InvalidArgumentError(`The 'remotePath' argument is mandatory`);
  }
  if (remotePath.endsWith('/')) {
    throw new _driver.errors.InvalidArgumentError(`It is expected that remote path points to a folder and not to a file. ` + `'${remotePath}' is given instead`);
  }
  return await deleteFileOrFolder(this.adb, remotePath);
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,