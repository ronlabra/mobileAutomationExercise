"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _support = require("appium/support");
var _driver = require("appium/driver");
const ADB_SHELL_FEATURE = 'adb_shell';
let commands = {};
exports.commands = commands;
commands.mobileShell = async function mobileShell(opts = {}) {
  this.ensureFeatureEnabled(ADB_SHELL_FEATURE);
  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;
  if (!_lodash.default.isString(command)) {
    throw new _driver.errors.InvalidArgumentError(`The 'command' argument is mandatory`);
  }
  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];
  this.log.debug(`Running '${this.adb.executable.path} ${_support.util.quote(adbArgs)}'`);
  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });
    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }
    return stdout;
  } catch (err) {
    this.log.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBREJfU0hFTExfRkVBVFVSRSIsImNvbW1hbmRzIiwibW9iaWxlU2hlbGwiLCJvcHRzIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJjb21tYW5kIiwiYXJncyIsInRpbWVvdXQiLCJpbmNsdWRlU3RkZXJyIiwiXyIsImlzU3RyaW5nIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJhZGJBcmdzIiwiYWRiIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwiaXNBcnJheSIsImxvZyIsImRlYnVnIiwicGF0aCIsInV0aWwiLCJxdW90ZSIsInN0ZG91dCIsInN0ZGVyciIsImV4ZWMiLCJlcnIiLCJlcnJvckFuZFRocm93IiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5cbmNvbnN0IEFEQl9TSEVMTF9GRUFUVVJFID0gJ2FkYl9zaGVsbCc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5tb2JpbGVTaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNoZWxsIChvcHRzID0ge30pIHtcbiAgdGhpcy5lbnN1cmVGZWF0dXJlRW5hYmxlZChBREJfU0hFTExfRkVBVFVSRSk7XG5cbiAgY29uc3Qge1xuICAgIGNvbW1hbmQsXG4gICAgYXJncyA9IFtdLFxuICAgIHRpbWVvdXQgPSAyMDAwMCxcbiAgICBpbmNsdWRlU3RkZXJyLFxuICB9ID0gb3B0cztcblxuICBpZiAoIV8uaXNTdHJpbmcoY29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgJ2NvbW1hbmQnIGFyZ3VtZW50IGlzIG1hbmRhdG9yeWApO1xuICB9XG5cbiAgY29uc3QgYWRiQXJncyA9IFtcbiAgICAuLi50aGlzLmFkYi5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLFxuICAgICdzaGVsbCcsXG4gICAgY29tbWFuZCxcbiAgICAuLi4oXy5pc0FycmF5KGFyZ3MpID8gYXJncyA6IFthcmdzXSlcbiAgXTtcbiAgdGhpcy5sb2cuZGVidWcoYFJ1bm5pbmcgJyR7dGhpcy5hZGIuZXhlY3V0YWJsZS5wYXRofSAke3V0aWwucXVvdGUoYWRiQXJncyl9J2ApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKHRoaXMuYWRiLmV4ZWN1dGFibGUucGF0aCwgYWRiQXJncywge3RpbWVvdXR9KTtcbiAgICBpZiAoaW5jbHVkZVN0ZGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRoaXMubG9nLmVycm9yQW5kVGhyb3coYENhbm5vdCBleGVjdXRlIHRoZSAnJHtjb21tYW5kfScgc2hlbGwgY29tbWFuZC4gYCArXG4gICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9LiBgICtcbiAgICAgIGBTdGRPdXQ6ICR7ZXJyLnN0ZG91dH0uIFN0ZEVycjogJHtlcnIuc3RkZXJyfWApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxpQkFBaUIsR0FBRyxXQUFXO0FBRXJDLElBQUlDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFBQztBQUVsQkEsUUFBUSxDQUFDQyxXQUFXLEdBQUcsZUFBZUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDNUQsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ0osaUJBQWlCLENBQUM7RUFFNUMsTUFBTTtJQUNKSyxPQUFPO0lBQ1BDLElBQUksR0FBRyxFQUFFO0lBQ1RDLE9BQU8sR0FBRyxLQUFLO0lBQ2ZDO0VBQ0YsQ0FBQyxHQUFHTCxJQUFJO0VBRVIsSUFBSSxDQUFDTSxlQUFDLENBQUNDLFFBQVEsQ0FBQ0wsT0FBTyxDQUFDLEVBQUU7SUFDeEIsTUFBTSxJQUFJTSxjQUFNLENBQUNDLG9CQUFvQixDQUFFLHFDQUFvQyxDQUFDO0VBQzlFO0VBRUEsTUFBTUMsT0FBTyxHQUFHLENBQ2QsR0FBRyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDQyxXQUFXLEVBQ2xDLE9BQU8sRUFDUFgsT0FBTyxFQUNQLElBQUlJLGVBQUMsQ0FBQ1EsT0FBTyxDQUFDWCxJQUFJLENBQUMsR0FBR0EsSUFBSSxHQUFHLENBQUNBLElBQUksQ0FBQyxDQUFDLENBQ3JDO0VBQ0QsSUFBSSxDQUFDWSxHQUFHLENBQUNDLEtBQUssQ0FBRSxZQUFXLElBQUksQ0FBQ0wsR0FBRyxDQUFDQyxVQUFVLENBQUNLLElBQUssSUFBR0MsYUFBSSxDQUFDQyxLQUFLLENBQUNULE9BQU8sQ0FBRSxHQUFFLENBQUM7RUFDOUUsSUFBSTtJQUNGLE1BQU07TUFBQ1UsTUFBTTtNQUFFQztJQUFNLENBQUMsR0FBRyxNQUFNLElBQUFDLGtCQUFJLEVBQUMsSUFBSSxDQUFDWCxHQUFHLENBQUNDLFVBQVUsQ0FBQ0ssSUFBSSxFQUFFUCxPQUFPLEVBQUU7TUFBQ047SUFBTyxDQUFDLENBQUM7SUFDakYsSUFBSUMsYUFBYSxFQUFFO01BQ2pCLE9BQU87UUFDTGUsTUFBTTtRQUNOQztNQUNGLENBQUM7SUFDSDtJQUNBLE9BQU9ELE1BQU07RUFDZixDQUFDLENBQUMsT0FBT0csR0FBRyxFQUFFO0lBQ1osSUFBSSxDQUFDUixHQUFHLENBQUNTLGFBQWEsQ0FBRSx1QkFBc0J0QixPQUFRLG1CQUFrQixHQUNyRSxtQkFBa0JxQixHQUFHLENBQUNFLE9BQVEsSUFBRyxHQUNqQyxXQUFVRixHQUFHLENBQUNILE1BQU8sYUFBWUcsR0FBRyxDQUFDRixNQUFPLEVBQUMsQ0FBQztFQUNuRDtBQUNGLENBQUM7QUFBQyxlQUdhdkIsUUFBUTtBQUFBIn0=